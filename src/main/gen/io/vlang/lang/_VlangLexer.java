// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: v.flex

package io.vlang.lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.Stack;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static io.vlang.lang.psi.VlangTokenTypes.*;
import static io.vlang.lang.psi.VlangDocElementTypes.*;


public class _VlangLexer implements FlexLexer, VlangTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MAYBE_SEMICOLON = 2;
  public static final int STRING = 4;
  public static final int SINGLE_STRING = 6;
  public static final int MULTI_LINE_COMMENT_STATE = 8;
  public static final int LONG_TEMPLATE_ENTRY = 10;
  public static final int SHORT_TEMPLATE_ENTRY = 12;
  public static final int ASM_BLOCK = 14;
  public static final int ASM_BLOCK_LINE = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8, 8
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u1f00\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u0100\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u1f00\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u1f00\1\u4d00\1\u4e00"+
    "\1\u4f00\1\u1f00\3\u0100\1\u5000\1\u5100\1\u5200\12\u1f00\4\u0100"+
    "\1\u5300\17\u1f00\2\u0100\1\u5400\41\u1f00\2\u0100\1\u5500\1\u5600"+
    "\2\u1f00\1\u5700\1\u5800\27\u0100\1\u5900\2\u0100\1\u5a00\45\u1f00"+
    "\1\u0100\1\u5b00\1\u5c00\11\u1f00\1\u5d00\27\u1f00\1\u5e00\1\u5f00"+
    "\1\u6000\1\u6100\11\u1f00\1\u6200\1\u6300\5\u1f00\1\u6400\1\u6500"+
    "\4\u1f00\1\u6600\21\u1f00\246\u0100\1\u6700\20\u0100\1\u6800\1\u6900"+
    "\25\u0100\1\u6a00\34\u0100\1\u6b00\14\u1f00\2\u0100\1\u6c00\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\6\27\2\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\2\40\1\41\1\40\1\42\1\40\3\43"+
    "\1\44\10\43\1\45\1\43\1\46\2\43\1\47\2\43"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\43"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\43\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105"+
    "\1\106\1\107\1\110\1\111\6\0\1\3\44\0\1\43"+
    "\12\0\1\43\4\0\1\43\5\0\27\43\1\0\37\43"+
    "\1\0\u01ca\43\4\0\14\43\16\0\5\43\7\0\1\43"+
    "\1\0\1\43\201\0\5\43\1\0\2\43\2\0\4\43"+
    "\1\0\1\43\6\0\1\43\1\0\3\43\1\0\1\43"+
    "\1\0\24\43\1\0\123\43\1\0\213\43\10\0\246\43"+
    "\1\0\46\43\2\0\1\43\6\0\51\43\107\0\33\43"+
    "\4\0\4\43\55\0\53\43\25\0\12\112\4\0\2\43"+
    "\1\0\143\43\1\0\1\43\17\0\2\43\7\0\2\43"+
    "\12\112\3\43\2\0\1\43\20\0\1\43\1\0\36\43"+
    "\35\0\131\43\13\0\1\43\16\0\12\112\41\43\11\0"+
    "\2\43\4\0\1\43\5\0\26\43\4\0\1\43\11\0"+
    "\1\43\3\0\1\43\27\0\31\43\7\0\13\43\65\0"+
    "\25\43\1\0\10\43\106\0\66\43\3\0\1\43\22\0"+
    "\1\43\7\0\12\43\4\0\12\112\1\0\20\43\4\0"+
    "\10\43\2\0\2\43\2\0\26\43\1\0\7\43\1\0"+
    "\1\43\3\0\4\43\3\0\1\43\20\0\1\43\15\0"+
    "\2\43\1\0\3\43\4\0\12\112\2\43\12\0\1\43"+
    "\10\0\6\43\4\0\2\43\2\0\26\43\1\0\7\43"+
    "\1\0\2\43\1\0\2\43\1\0\2\43\37\0\4\43"+
    "\1\0\1\43\7\0\12\112\2\0\3\43\20\0\11\43"+
    "\1\0\3\43\1\0\26\43\1\0\7\43\1\0\2\43"+
    "\1\0\5\43\3\0\1\43\22\0\1\43\17\0\2\43"+
    "\4\0\12\112\11\0\1\43\13\0\10\43\2\0\2\43"+
    "\2\0\26\43\1\0\7\43\1\0\2\43\1\0\5\43"+
    "\3\0\1\43\36\0\2\43\1\0\3\43\4\0\12\112"+
    "\1\0\1\43\21\0\1\43\1\0\6\43\3\0\3\43"+
    "\1\0\4\43\3\0\2\43\1\0\1\43\1\0\2\43"+
    "\3\0\2\43\3\0\3\43\3\0\14\43\26\0\1\43"+
    "\25\0\12\112\25\0\10\43\1\0\3\43\1\0\27\43"+
    "\1\0\20\43\3\0\1\43\32\0\3\43\5\0\2\43"+
    "\4\0\12\112\20\0\1\43\4\0\10\43\1\0\3\43"+
    "\1\0\27\43\1\0\12\43\1\0\5\43\3\0\1\43"+
    "\40\0\1\43\1\0\2\43\4\0\12\112\1\0\2\43"+
    "\22\0\10\43\1\0\3\43\1\0\51\43\2\0\1\43"+
    "\20\0\1\43\5\0\3\43\10\0\3\43\4\0\12\112"+
    "\12\0\6\43\5\0\22\43\3\0\30\43\1\0\11\43"+
    "\1\0\1\43\2\0\7\43\37\0\12\112\21\0\60\43"+
    "\1\0\2\43\14\0\7\43\11\0\12\112\47\0\2\43"+
    "\1\0\1\43\1\0\5\43\1\0\30\43\1\0\1\43"+
    "\1\0\12\43\1\0\2\43\11\0\1\43\2\0\5\43"+
    "\1\0\1\43\11\0\12\112\2\0\4\43\40\0\1\43"+
    "\37\0\12\112\26\0\10\43\1\0\44\43\33\0\5\43"+
    "\163\0\53\43\24\0\1\43\12\112\6\0\6\43\4\0"+
    "\4\43\3\0\1\43\3\0\2\43\7\0\3\43\4\0"+
    "\15\43\14\0\1\43\1\0\12\112\6\0\46\43\1\0"+
    "\1\43\5\0\1\43\2\0\53\43\1\0\115\43\1\0"+
    "\4\43\2\0\7\43\1\0\1\43\1\0\4\43\2\0"+
    "\51\43\1\0\4\43\2\0\41\43\1\0\4\43\2\0"+
    "\7\43\1\0\1\43\1\0\4\43\2\0\17\43\1\0"+
    "\71\43\1\0\4\43\2\0\103\43\45\0\20\43\20\0"+
    "\126\43\2\0\6\43\3\0\u016c\43\2\0\21\43\1\0"+
    "\32\43\5\0\113\43\6\0\10\43\7\0\15\43\1\0"+
    "\4\43\16\0\22\43\16\0\22\43\16\0\15\43\1\0"+
    "\3\43\17\0\64\43\43\0\1\43\4\0\1\43\3\0"+
    "\12\112\46\0\12\112\6\0\131\43\7\0\5\43\2\0"+
    "\42\43\1\0\1\43\5\0\106\43\12\0\37\43\47\0"+
    "\12\112\36\43\2\0\5\43\13\0\54\43\4\0\32\43"+
    "\6\0\12\112\46\0\27\43\11\0\65\43\53\0\12\112"+
    "\6\0\12\112\15\0\1\43\135\0\57\43\21\0\7\43"+
    "\4\0\12\112\51\0\36\43\15\0\2\43\12\112\54\43"+
    "\32\0\44\43\34\0\12\112\3\0\3\43\12\112\44\43"+
    "\2\0\11\43\7\0\53\43\2\0\3\43\51\0\4\43"+
    "\1\0\6\43\1\0\2\43\3\0\1\43\5\0\300\43"+
    "\100\0\26\43\2\0\6\43\2\0\46\43\2\0\6\43"+
    "\2\0\10\43\1\0\1\43\1\0\1\43\1\0\1\43"+
    "\1\0\37\43\2\0\65\43\1\0\7\43\1\0\1\43"+
    "\3\0\3\43\1\0\7\43\3\0\4\43\2\0\6\43"+
    "\4\0\15\43\5\0\3\43\1\0\7\43\53\0\2\3"+
    "\107\0\1\43\15\0\1\43\20\0\15\43\145\0\1\43"+
    "\4\0\1\43\2\0\12\43\1\0\1\43\3\0\5\43"+
    "\6\0\1\43\1\0\1\43\1\0\1\43\1\0\4\43"+
    "\1\0\13\43\2\0\4\43\5\0\5\43\4\0\1\43"+
    "\64\0\2\43\u017b\0\57\43\1\0\57\43\1\0\205\43"+
    "\6\0\4\43\3\0\2\43\14\0\46\43\1\0\1\43"+
    "\5\0\1\43\2\0\70\43\7\0\1\43\20\0\27\43"+
    "\11\0\7\43\1\0\7\43\1\0\7\43\1\0\7\43"+
    "\1\0\7\43\1\0\7\43\1\0\7\43\1\0\7\43"+
    "\120\0\1\43\325\0\2\43\52\0\5\43\5\0\2\43"+
    "\4\0\126\43\6\0\3\43\1\0\132\43\1\0\4\43"+
    "\5\0\53\43\1\0\136\43\21\0\33\43\65\0\306\43"+
    "\112\0\360\43\20\0\215\43\103\0\56\43\2\0\15\43"+
    "\3\0\20\43\12\112\2\43\24\0\57\43\20\0\37\43"+
    "\2\0\106\43\61\0\11\43\2\0\147\43\2\0\65\43"+
    "\2\0\5\43\60\0\13\43\1\0\3\43\1\0\4\43"+
    "\1\0\27\43\35\0\64\43\16\0\62\43\34\0\12\112"+
    "\30\0\6\43\3\0\1\43\1\0\2\43\1\0\12\112"+
    "\34\43\12\0\27\43\31\0\35\43\7\0\57\43\34\0"+
    "\1\43\12\112\6\0\5\43\1\0\12\43\12\112\5\43"+
    "\1\0\51\43\27\0\3\43\1\0\10\43\4\0\12\112"+
    "\6\0\27\43\3\0\1\43\3\0\62\43\1\0\1\43"+
    "\3\0\2\43\2\0\5\43\2\0\1\43\1\0\1\43"+
    "\30\0\3\43\2\0\13\43\7\0\3\43\14\0\6\43"+
    "\2\0\6\43\2\0\6\43\11\0\7\43\1\0\7\43"+
    "\1\0\53\43\1\0\14\43\10\0\163\43\15\0\12\112"+
    "\6\0\244\43\14\0\27\43\4\0\61\43\4\0\u0100\3"+
    "\156\43\2\0\152\43\46\0\7\43\14\0\5\43\5\0"+
    "\1\43\1\0\12\43\1\0\15\43\1\0\5\43\1\0"+
    "\1\43\1\0\2\43\1\0\2\43\1\0\154\43\41\0"+
    "\153\43\22\0\100\43\2\0\66\43\50\0\14\43\164\0"+
    "\5\43\1\0\207\43\23\0\12\112\7\0\32\43\6\0"+
    "\32\43\13\0\131\43\3\0\6\43\2\0\6\43\2\0"+
    "\6\43\2\0\3\43\43\0\14\43\1\0\32\43\1\0"+
    "\23\43\1\0\2\43\1\0\17\43\2\0\16\43\42\0"+
    "\173\43\205\0\35\43\3\0\61\43\57\0\40\43\15\0"+
    "\24\43\1\0\10\43\6\0\46\43\12\0\36\43\2\0"+
    "\44\43\4\0\10\43\60\0\236\43\2\0\12\112\6\0"+
    "\44\43\4\0\44\43\4\0\50\43\10\0\64\43\234\0"+
    "\67\43\11\0\26\43\12\0\10\43\230\0\6\43\2\0"+
    "\1\43\1\0\54\43\1\0\2\43\3\0\1\43\2\0"+
    "\27\43\12\0\27\43\11\0\37\43\101\0\23\43\1\0"+
    "\2\43\12\0\26\43\12\0\32\43\106\0\70\43\6\0"+
    "\2\43\100\0\1\43\17\0\4\43\1\0\3\43\1\0"+
    "\35\43\52\0\35\43\3\0\35\43\43\0\10\43\1\0"+
    "\34\43\33\0\66\43\12\0\26\43\12\0\23\43\15\0"+
    "\22\43\156\0\111\43\67\0\63\43\15\0\63\43\15\0"+
    "\44\43\14\0\12\112\306\0\35\43\12\0\1\43\10\0"+
    "\26\43\232\0\27\43\14\0\65\43\56\0\12\112\23\0"+
    "\55\43\40\0\31\43\7\0\12\112\11\0\44\43\17\0"+
    "\12\112\4\0\1\43\13\0\43\43\3\0\1\43\14\0"+
    "\60\43\16\0\4\43\13\0\12\112\1\43\1\0\1\43"+
    "\43\0\22\43\1\0\31\43\124\0\7\43\1\0\1\43"+
    "\1\0\4\43\1\0\17\43\1\0\12\43\7\0\57\43"+
    "\21\0\12\112\13\0\10\43\2\0\2\43\2\0\26\43"+
    "\1\0\7\43\1\0\2\43\1\0\5\43\3\0\1\43"+
    "\22\0\1\43\14\0\5\43\236\0\65\43\22\0\4\43"+
    "\5\0\12\112\5\0\1\43\40\0\60\43\24\0\2\43"+
    "\1\0\1\43\10\0\12\112\246\0\57\43\51\0\4\43"+
    "\44\0\60\43\24\0\1\43\13\0\12\112\46\0\53\43"+
    "\15\0\1\43\7\0\12\112\66\0\33\43\25\0\12\112"+
    "\306\0\54\43\164\0\100\43\12\112\25\0\1\43\240\0"+
    "\10\43\2\0\47\43\20\0\1\43\1\0\1\43\34\0"+
    "\1\43\12\0\50\43\7\0\1\43\25\0\1\43\13\0"+
    "\56\43\23\0\1\43\42\0\71\43\7\0\11\43\1\0"+
    "\45\43\21\0\1\43\17\0\12\112\30\0\36\43\160\0"+
    "\7\43\1\0\2\43\1\0\46\43\25\0\1\43\11\0"+
    "\12\112\6\0\6\43\1\0\2\43\1\0\40\43\16\0"+
    "\1\43\7\0\12\112\u0136\0\23\43\15\0\232\43\346\0"+
    "\304\43\274\0\57\43\321\0\107\43\271\0\71\43\7\0"+
    "\37\43\1\0\12\112\146\0\36\43\22\0\60\43\20\0"+
    "\4\43\14\0\12\112\11\0\25\43\5\0\23\43\260\0"+
    "\100\43\200\0\113\43\5\0\1\43\102\0\15\43\100\0"+
    "\2\43\1\0\1\43\34\0\370\43\10\0\363\43\15\0"+
    "\37\43\61\0\3\43\21\0\4\43\10\0\u018c\43\4\0"+
    "\153\43\5\0\15\43\3\0\11\43\7\0\12\43\146\0"+
    "\125\43\1\0\107\43\1\0\2\43\2\0\1\43\2\0"+
    "\2\43\2\0\4\43\1\0\14\43\1\0\1\43\1\0"+
    "\7\43\1\0\101\43\1\0\4\43\2\0\10\43\1\0"+
    "\7\43\1\0\34\43\1\0\4\43\1\0\5\43\1\0"+
    "\1\43\3\0\7\43\1\0\u0154\43\2\0\31\43\1\0"+
    "\31\43\1\0\37\43\1\0\31\43\1\0\37\43\1\0"+
    "\31\43\1\0\37\43\1\0\31\43\1\0\37\43\1\0"+
    "\31\43\1\0\10\43\2\0\62\112\55\43\12\0\7\43"+
    "\2\0\12\112\4\0\1\43\u0171\0\54\43\4\0\12\112"+
    "\6\0\305\43\73\0\104\43\7\0\1\43\4\0\12\112"+
    "\246\0\4\43\1\0\33\43\1\0\2\43\1\0\1\43"+
    "\2\0\1\43\1\0\12\43\1\0\4\43\1\0\1\43"+
    "\1\0\1\43\6\0\1\43\4\0\1\43\1\0\1\43"+
    "\1\0\1\43\1\0\3\43\1\0\2\43\1\0\1\43"+
    "\2\0\1\43\1\0\1\43\1\0\1\43\1\0\1\43"+
    "\1\0\1\43\1\0\2\43\1\0\1\43\2\0\4\43"+
    "\1\0\7\43\1\0\4\43\1\0\4\43\1\0\1\43"+
    "\1\0\12\43\1\0\21\43\5\0\3\43\1\0\5\43"+
    "\1\0\21\43\104\0\327\43\51\0\65\43\13\0\336\43"+
    "\2\0\u0182\43\16\0\u0131\43\37\0\36\43\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27904];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\2\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\3\32\1\33\1\34\1\35\1\32"+
    "\1\36\22\32\1\37\1\40\1\41\1\42\1\43\1\2"+
    "\1\44\2\43\1\45\1\46\1\45\1\1\1\45\3\47"+
    "\1\50\1\51\1\1\2\52\3\53\1\54\1\55\1\5"+
    "\1\11\2\55\1\56\2\0\1\57\1\60\1\0\2\61"+
    "\1\62\4\61\3\32\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\6\0\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\0\1\107\1\0\1\110\1\32\1\0\1\111\1\0"+
    "\1\112\10\32\1\113\1\32\1\114\1\115\1\32\1\116"+
    "\1\117\6\32\1\120\1\32\2\0\13\32\1\121\1\122"+
    "\1\76\1\123\1\124\1\125\1\126\1\127\1\130\1\53"+
    "\1\76\1\77\1\131\1\132\1\133\4\61\2\32\1\134"+
    "\1\135\1\136\3\0\1\75\1\137\1\140\1\141\1\142"+
    "\1\143\2\0\3\32\1\111\2\0\1\144\2\0\1\145"+
    "\11\32\1\146\7\32\1\147\1\150\1\32\1\151\1\152"+
    "\15\32\1\0\1\53\1\55\1\153\5\61\1\32\1\154"+
    "\1\155\4\0\1\156\2\32\4\0\6\32\1\157\1\160"+
    "\1\161\1\32\1\162\4\32\1\163\2\32\1\164\10\32"+
    "\1\165\1\166\3\32\1\53\1\155\1\61\1\167\3\61"+
    "\1\170\2\32\1\111\2\0\1\111\2\32\1\171\1\172"+
    "\1\32\1\173\1\174\4\32\1\175\2\32\1\176\3\32"+
    "\1\177\3\32\1\200\2\32\1\53\4\61\2\32\4\0"+
    "\1\201\1\202\2\32\1\203\2\32\1\204\1\205\1\206"+
    "\1\207\1\210\1\211\1\212\1\213\1\214\1\32\1\53"+
    "\1\61\2\32\3\0\5\32\1\53\1\61\1\215\1\32"+
    "\2\0\1\216\3\32\2\217\1\32\2\111\1\32\1\220"+
    "\1\221\1\222\2\0\1\223\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[418];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\113\0\226\0\341\0\u012c\0\u0177\0\u01c2\0\u020d"+
    "\0\u0258\0\u02a3\0\u02ee\0\u0339\0\u0384\0\u02a3\0\u03cf\0\u041a"+
    "\0\u0465\0\u04b0\0\u02a3\0\u02a3\0\u02a3\0\u04fb\0\u0546\0\u02a3"+
    "\0\u0591\0\u05dc\0\u0627\0\u0672\0\u06bd\0\u0708\0\u02a3\0\u0753"+
    "\0\u079e\0\u07e9\0\u0834\0\u087f\0\u08ca\0\u0915\0\u0960\0\u02a3"+
    "\0\u02a3\0\u09ab\0\u09f6\0\u0a41\0\u0a8c\0\u0ad7\0\u0b22\0\u0b6d"+
    "\0\u0bb8\0\u0c03\0\u0c4e\0\u0c99\0\u0ce4\0\u0d2f\0\u0d7a\0\u0dc5"+
    "\0\u0e10\0\u0e5b\0\u0ea6\0\u0ef1\0\u0f3c\0\u0f87\0\u02a3\0\u0fd2"+
    "\0\u02a3\0\u02a3\0\u02a3\0\u02a3\0\u02a3\0\u101d\0\u1068\0\u10b3"+
    "\0\u02a3\0\u10fe\0\u1149\0\u1194\0\u02a3\0\u11df\0\u122a\0\u02a3"+
    "\0\u02a3\0\u1275\0\u12c0\0\u130b\0\u1356\0\u13a1\0\u13ec\0\u02a3"+
    "\0\u1437\0\u1437\0\u1437\0\u1482\0\u14cd\0\u02a3\0\u02ee\0\u1518"+
    "\0\u02a3\0\u02a3\0\u1563\0\u15ae\0\u15f9\0\u02a3\0\u1644\0\u168f"+
    "\0\u16da\0\u1725\0\u1770\0\u17bb\0\u1806\0\u02a3\0\u02a3\0\u02a3"+
    "\0\u1851\0\u02a3\0\u02a3\0\u02a3\0\u02a3\0\u02a3\0\u189c\0\u18e7"+
    "\0\u1932\0\u197d\0\u02a3\0\u19c8\0\u1a13\0\u1a5e\0\u1aa9\0\u1af4"+
    "\0\u1b3f\0\u02a3\0\u02a3\0\u1b8a\0\u02a3\0\u02a3\0\u02a3\0\u1bd5"+
    "\0\u02a3\0\u1c20\0\u02a3\0\u1c6b\0\u1cb6\0\u1cb6\0\u1d01\0\u1d4c"+
    "\0\u1d97\0\u1de2\0\u1e2d\0\u1e78\0\u1ec3\0\u1f0e\0\u1f59\0\u1fa4"+
    "\0\u08ca\0\u1fef\0\u203a\0\u08ca\0\u2085\0\u20d0\0\u211b\0\u2166"+
    "\0\u21b1\0\u21fc\0\u2247\0\u2292\0\u22dd\0\u08ca\0\u2328\0\u2373"+
    "\0\u23be\0\u2409\0\u2454\0\u249f\0\u24ea\0\u2535\0\u2580\0\u25cb"+
    "\0\u2616\0\u2661\0\u26ac\0\u26f7\0\u02a3\0\u02a3\0\u2742\0\u278d"+
    "\0\u27d8\0\u02a3\0\u02a3\0\u02a3\0\u02a3\0\u2823\0\u286e\0\u28b9"+
    "\0\u2904\0\u2904\0\u294f\0\u299a\0\u29e5\0\u2a30\0\u2a7b\0\u2ac6"+
    "\0\u2b11\0\u08ca\0\u02a3\0\u02a3\0\u2b5c\0\u2ba7\0\u2bf2\0\u2c3d"+
    "\0\u2c88\0\u2cd3\0\u2d1e\0\u02a3\0\u02a3\0\u2d69\0\u2db4\0\u2dff"+
    "\0\u2e4a\0\u2e95\0\u02a3\0\u2ee0\0\u2f2b\0\u1cb6\0\u2f76\0\u2fc1"+
    "\0\u08ca\0\u300c\0\u3057\0\u30a2\0\u30ed\0\u3138\0\u3183\0\u31ce"+
    "\0\u3219\0\u3264\0\u08ca\0\u32af\0\u32fa\0\u3345\0\u3390\0\u33db"+
    "\0\u3426\0\u3471\0\u08ca\0\u08ca\0\u34bc\0\u08ca\0\u02a3\0\u3507"+
    "\0\u3552\0\u359d\0\u35e8\0\u3633\0\u367e\0\u36c9\0\u3714\0\u375f"+
    "\0\u37aa\0\u37f5\0\u3840\0\u388b\0\u38d6\0\u3921\0\u396c\0\u02a3"+
    "\0\u39b7\0\u3a02\0\u3a4d\0\u3a98\0\u3ae3\0\u3b2e\0\u08ca\0\u02a3"+
    "\0\u2c3d\0\u2c88\0\u2cd3\0\u2d1e\0\u02a3\0\u3b79\0\u3bc4\0\u3c0f"+
    "\0\u3c5a\0\u3ca5\0\u3cf0\0\u3d3b\0\u3d86\0\u3dd1\0\u3e1c\0\u3e67"+
    "\0\u3eb2\0\u08ca\0\u08ca\0\u08ca\0\u3efd\0\u08ca\0\u3f48\0\u3f93"+
    "\0\u3fde\0\u4029\0\u08ca\0\u4074\0\u40bf\0\u08ca\0\u410a\0\u4155"+
    "\0\u41a0\0\u41eb\0\u4236\0\u4281\0\u42cc\0\u4317\0\u08ca\0\u4362"+
    "\0\u43ad\0\u43f8\0\u4443\0\u448e\0\u1437\0\u44d9\0\u4524\0\u456f"+
    "\0\u45ba\0\u4605\0\u08ca\0\u4650\0\u469b\0\u46e6\0\u4731\0\u477c"+
    "\0\u47c7\0\u4812\0\u485d\0\u08ca\0\u08ca\0\u48a8\0\u08ca\0\u08ca"+
    "\0\u48f3\0\u493e\0\u4989\0\u49d4\0\u08ca\0\u4a1f\0\u4a6a\0\u08ca"+
    "\0\u4ab5\0\u4b00\0\u4b4b\0\u08ca\0\u4b96\0\u4be1\0\u4c2c\0\u08ca"+
    "\0\u4c77\0\u4cc2\0\u4d0d\0\u4d58\0\u4da3\0\u4dee\0\u4e39\0\u4e84"+
    "\0\u4ecf\0\u4f1a\0\u4f65\0\u4fb0\0\u4ffb\0\u08ca\0\u08ca\0\u5046"+
    "\0\u5091\0\u08ca\0\u50dc\0\u5127\0\u08ca\0\u08ca\0\u08ca\0\u08ca"+
    "\0\u08ca\0\u08ca\0\u08ca\0\u08ca\0\u08ca\0\u5172\0\u51bd\0\u5208"+
    "\0\u5253\0\u529e\0\u52e9\0\u5334\0\u537f\0\u53ca\0\u5415\0\u5460"+
    "\0\u54ab\0\u54f6\0\u5541\0\u558c\0\u08ca\0\u55d7\0\u5622\0\u566d"+
    "\0\u08ca\0\u56b8\0\u5703\0\u574e\0\u08ca\0\u1356\0\u5799\0\u57e4"+
    "\0\u582f\0\u587a\0\u08ca\0\u08ca\0\u08ca\0\u58c5\0\u5910\0\u08ca"+
    "\0\u595b\0\u59a6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[418];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\1\13\1\14\1\12\1\13\1\12\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\3\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\2\45\1\47\3\45\1\50\1\12\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\45\1\64\1\45\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\4\45\1\77\1\100"+
    "\1\101\1\102\1\12\1\103\1\104\1\105\1\12\1\104"+
    "\1\12\1\103\1\16\4\103\1\23\7\103\1\106\33\103"+
    "\1\107\32\103\7\110\1\111\1\110\1\112\37\110\1\113"+
    "\41\110\11\114\1\112\2\114\1\111\34\114\1\113\41\114"+
    "\17\115\1\116\4\115\1\117\66\115\1\12\1\13\1\14"+
    "\1\12\1\13\1\12\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\3\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\2\45\1\47\3\45"+
    "\1\50\1\12\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\45\1\64\1\45"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\4\45\1\120\1\100\1\121\1\102\10\12"+
    "\1\16\4\12\1\23\7\12\1\122\13\12\10\123\4\12"+
    "\1\123\1\12\2\123\1\124\25\123\6\12\1\104\1\14"+
    "\1\12\1\104\2\12\1\16\4\12\1\23\7\12\1\122"+
    "\13\12\10\125\4\12\1\125\1\12\2\125\1\126\20\125"+
    "\1\127\4\125\1\130\4\12\2\131\1\14\2\131\1\12"+
    "\1\131\1\132\4\131\1\133\7\131\1\134\33\131\1\135"+
    "\27\131\1\136\2\131\114\0\1\137\2\0\1\137\17\0"+
    "\1\140\70\0\1\14\133\0\1\141\10\0\1\142\31\0"+
    "\1\143\24\0\6\144\1\145\41\144\1\146\10\144\1\147"+
    "\1\144\1\150\2\144\1\151\5\144\1\152\16\144\40\0"+
    "\10\45\4\0\1\45\1\0\4\45\1\153\1\154\2\45"+
    "\1\155\17\45\41\0\1\156\71\0\1\157\20\0\1\160"+
    "\16\0\1\161\73\0\1\162\76\0\1\163\13\0\1\164"+
    "\100\0\1\165\11\0\1\166\101\0\1\167\1\0\4\170"+
    "\101\0\1\171\4\0\1\172\7\0\1\173\101\0\1\174"+
    "\1\0\4\35\11\0\1\175\4\0\1\176\4\0\1\177"+
    "\2\0\1\200\2\0\1\175\10\0\1\201\7\0\1\176"+
    "\32\0\1\174\1\0\4\35\11\0\1\175\11\0\1\177"+
    "\5\0\1\175\64\0\1\202\100\0\1\203\10\0\1\204"+
    "\1\205\112\0\1\206\112\0\1\207\1\210\100\0\1\141"+
    "\127\0\10\45\1\211\3\0\1\45\1\0\30\45\32\0"+
    "\4\45\7\0\10\45\4\0\1\45\1\0\30\45\4\0"+
    "\1\45\23\0\1\212\1\0\4\45\7\0\10\45\4\0"+
    "\1\45\1\0\30\45\4\0\1\45\25\0\4\45\7\0"+
    "\5\45\1\46\2\45\4\0\1\45\1\0\30\45\4\0"+
    "\1\45\34\0\1\213\103\0\4\45\7\0\10\45\4\0"+
    "\1\214\1\0\30\45\4\0\1\45\2\215\1\216\46\215"+
    "\1\217\3\215\1\216\35\215\25\0\4\45\7\0\10\45"+
    "\4\0\1\45\1\0\20\45\1\220\1\221\6\45\4\0"+
    "\1\45\25\0\4\45\7\0\10\45\4\0\1\45\1\0"+
    "\17\45\1\222\10\45\4\0\1\45\7\0\1\16\4\0"+
    "\1\23\10\0\4\45\7\0\10\45\4\0\1\45\1\0"+
    "\15\45\1\223\12\45\4\0\1\45\25\0\4\45\7\0"+
    "\10\45\4\0\1\45\1\0\4\45\1\224\15\45\1\225"+
    "\5\45\4\0\1\45\25\0\4\45\7\0\10\45\4\0"+
    "\1\45\1\0\12\45\1\226\1\45\1\227\13\45\4\0"+
    "\1\45\25\0\4\45\7\0\10\45\4\0\1\45\1\0"+
    "\1\230\13\45\1\231\1\232\12\45\4\0\1\45\25\0"+
    "\4\45\7\0\10\45\4\0\1\45\1\0\15\45\1\233"+
    "\12\45\4\0\1\45\25\0\4\45\7\0\10\45\4\0"+
    "\1\45\1\0\5\45\1\234\5\45\1\235\1\236\3\45"+
    "\1\237\7\45\4\0\1\45\25\0\4\45\7\0\10\45"+
    "\4\0\1\45\1\0\15\45\1\240\12\45\4\0\1\45"+
    "\25\0\4\45\7\0\10\45\4\0\1\45\1\0\1\241"+
    "\14\45\1\242\4\45\1\243\5\45\4\0\1\45\25\0"+
    "\4\45\7\0\10\45\4\0\1\45\1\0\10\45\1\244"+
    "\4\45\1\245\12\45\4\0\1\45\25\0\4\45\7\0"+
    "\10\45\4\0\1\45\1\0\17\45\1\246\10\45\4\0"+
    "\1\45\25\0\4\45\7\0\10\45\4\0\1\45\1\0"+
    "\22\45\1\247\5\45\4\0\1\45\7\0\1\250\4\0"+
    "\1\251\10\0\4\45\7\0\10\45\4\0\1\45\1\0"+
    "\4\45\1\252\5\45\1\253\15\45\4\0\1\45\25\0"+
    "\4\45\7\0\10\45\4\0\1\45\1\0\4\45\1\254"+
    "\2\45\1\255\1\256\5\45\1\257\2\45\1\260\6\45"+
    "\4\0\1\45\25\0\4\45\7\0\10\45\4\0\1\45"+
    "\1\0\17\45\1\261\6\45\1\262\1\45\4\0\1\45"+
    "\25\0\4\45\7\0\10\45\4\0\1\45\1\0\14\45"+
    "\1\263\13\45\4\0\1\45\25\0\4\45\7\0\10\45"+
    "\4\0\1\45\1\0\15\45\1\264\12\45\4\0\1\45"+
    "\34\0\1\265\52\0\1\266\22\0\1\267\4\0\1\270"+
    "\75\0\1\16\4\0\1\23\76\0\7\110\1\0\1\110"+
    "\1\0\37\110\1\0\41\110\40\0\10\271\4\0\1\271"+
    "\1\0\30\271\1\272\4\0\2\273\4\0\105\273\11\114"+
    "\1\0\2\114\1\0\34\114\1\0\41\114\24\0\1\274"+
    "\105\0\1\275\112\0\1\267\120\0\4\123\7\0\10\123"+
    "\4\0\1\123\1\0\30\123\4\0\1\123\7\0\1\16"+
    "\4\0\1\23\10\0\4\123\7\0\10\123\4\0\1\123"+
    "\1\0\30\123\4\0\1\123\25\0\4\125\7\0\10\125"+
    "\4\0\1\125\1\0\30\125\4\0\1\125\7\0\1\16"+
    "\4\0\1\23\10\0\4\125\7\0\10\125\4\0\1\125"+
    "\1\0\30\125\4\0\1\125\25\0\4\125\7\0\10\125"+
    "\4\0\1\125\1\0\15\125\1\276\12\125\4\0\1\125"+
    "\2\131\1\0\2\131\1\0\102\131\1\0\4\131\1\0"+
    "\2\131\1\0\11\131\1\277\70\131\1\0\4\131\1\0"+
    "\2\131\1\0\1\131\1\132\4\131\1\133\73\131\1\0"+
    "\2\131\24\0\1\300\160\0\1\301\3\0\1\302\14\0"+
    "\2\144\1\0\2\144\1\0\105\144\50\303\1\144\42\303"+
    "\2\144\1\0\2\144\1\0\54\144\1\304\32\144\1\0"+
    "\2\144\1\0\62\144\1\305\24\144\1\0\2\144\1\0"+
    "\64\144\1\306\22\144\1\0\2\144\1\0\61\144\1\307"+
    "\23\144\25\0\4\45\7\0\10\45\4\0\1\45\1\0"+
    "\12\45\1\310\15\45\4\0\1\45\25\0\4\45\7\0"+
    "\10\45\4\0\1\45\1\0\15\45\1\311\12\45\4\0"+
    "\1\45\25\0\4\45\7\0\10\45\4\0\1\45\1\0"+
    "\5\45\1\312\22\45\4\0\1\45\34\0\1\313\101\0"+
    "\1\314\114\0\4\170\11\0\1\175\11\0\1\315\5\0"+
    "\1\175\47\0\1\316\73\0\2\172\1\137\2\270\1\0"+
    "\105\172\25\0\4\170\102\0\1\317\1\0\1\317\2\0"+
    "\4\320\107\0\4\321\7\0\3\321\13\0\6\321\54\0"+
    "\4\35\23\0\1\177\63\0\2\322\111\0\3\323\117\0"+
    "\1\324\112\0\1\325\1\326\114\0\1\327\10\330\4\0"+
    "\1\330\1\0\30\330\32\0\4\45\7\0\10\45\4\0"+
    "\1\45\1\0\6\45\1\331\6\45\1\332\12\45\4\0"+
    "\1\45\55\0\1\333\35\0\2\215\4\0\17\215\3\334"+
    "\16\215\1\335\6\215\1\336\22\215\1\337\2\215\1\340"+
    "\7\215\25\0\4\45\7\0\10\45\4\0\1\45\1\0"+
    "\13\45\1\341\4\45\1\342\7\45\4\0\1\45\25\0"+
    "\4\45\7\0\10\45\4\0\1\45\1\0\15\45\1\343"+
    "\12\45\4\0\1\45\25\0\4\45\7\0\10\45\4\0"+
    "\1\45\1\0\4\45\1\344\23\45\4\0\1\45\25\0"+
    "\4\45\7\0\10\45\4\0\1\45\1\0\14\45\1\345"+
    "\13\45\4\0\1\45\25\0\4\45\7\0\10\45\4\0"+
    "\1\45\1\0\5\45\1\346\22\45\4\0\1\45\25\0"+
    "\4\45\7\0\10\45\4\0\1\45\1\0\13\45\1\347"+
    "\14\45\4\0\1\45\25\0\4\45\7\0\10\45\4\0"+
    "\1\45\1\0\20\45\1\350\7\45\4\0\1\45\25\0"+
    "\4\45\7\0\10\45\4\0\1\45\1\0\22\45\1\351"+
    "\5\45\4\0\1\45\25\0\4\45\7\0\10\45\4\0"+
    "\1\45\1\0\12\45\1\352\15\45\4\0\1\45\25\0"+
    "\4\45\7\0\10\45\4\0\1\45\1\0\17\45\1\353"+
    "\10\45\4\0\1\45\25\0\4\45\7\0\10\45\4\0"+
    "\1\45\1\0\21\45\1\354\6\45\4\0\1\45\25\0"+
    "\4\45\7\0\10\45\4\0\1\45\1\0\16\45\1\355"+
    "\11\45\4\0\1\45\25\0\4\45\7\0\10\45\4\0"+
    "\1\45\1\0\21\45\1\356\6\45\4\0\1\45\25\0"+
    "\4\45\7\0\10\45\4\0\1\45\1\0\17\45\1\357"+
    "\10\45\4\0\1\45\25\0\4\45\7\0\10\45\4\0"+
    "\1\45\1\0\2\45\1\360\25\45\4\0\1\45\25\0"+
    "\4\45\7\0\10\45\4\0\1\45\1\0\21\45\1\361"+
    "\6\45\4\0\1\45\25\0\4\45\7\0\10\45\4\0"+
    "\1\45\1\0\3\45\1\362\24\45\4\0\1\45\25\0"+
    "\4\45\7\0\10\45\4\0\1\45\1\0\21\45\1\363"+
    "\6\45\4\0\1\45\25\0\4\45\7\0\10\45\4\0"+
    "\1\45\1\0\12\45\1\364\15\45\4\0\1\45\25\0"+
    "\4\45\7\0\10\45\4\0\1\45\1\0\14\45\1\365"+
    "\13\45\4\0\1\45\25\0\4\45\7\0\10\45\4\0"+
    "\1\45\1\0\1\45\1\366\26\45\4\0\1\45\7\250"+
    "\1\367\103\250\14\251\1\367\76\251\25\0\4\45\7\0"+
    "\10\45\4\0\1\45\1\0\21\45\1\370\6\45\4\0"+
    "\1\45\25\0\4\45\7\0\10\45\4\0\1\45\1\0"+
    "\15\45\1\371\12\45\4\0\1\45\25\0\4\45\7\0"+
    "\10\45\4\0\1\45\1\0\12\45\1\372\15\45\4\0"+
    "\1\45\25\0\4\45\7\0\10\45\4\0\1\45\1\0"+
    "\1\373\27\45\4\0\1\45\25\0\4\45\7\0\10\45"+
    "\4\0\1\45\1\0\27\45\1\374\4\0\1\45\25\0"+
    "\4\45\7\0\10\45\4\0\1\45\1\0\1\375\27\45"+
    "\4\0\1\45\25\0\4\45\7\0\10\45\4\0\1\45"+
    "\1\0\1\376\16\45\1\377\10\45\4\0\1\45\25\0"+
    "\4\45\7\0\10\45\4\0\1\45\1\0\22\45\1\u0100"+
    "\5\45\4\0\1\45\25\0\4\45\7\0\10\45\4\0"+
    "\1\45\1\0\16\45\1\u0101\11\45\4\0\1\45\25\0"+
    "\4\45\7\0\10\45\4\0\1\45\1\0\10\45\1\u0102"+
    "\7\45\1\u0103\7\45\4\0\1\45\25\0\4\45\7\0"+
    "\10\45\4\0\1\45\1\0\12\45\1\u0104\15\45\4\0"+
    "\1\45\17\0\1\u0105\73\0\2\270\1\0\2\270\1\0"+
    "\105\270\25\0\4\271\7\0\10\271\4\0\1\271\1\0"+
    "\30\271\4\0\1\271\25\0\4\125\7\0\10\125\4\0"+
    "\1\125\1\0\12\125\1\u0106\15\125\4\0\1\125\2\131"+
    "\1\0\2\131\1\0\11\131\1\u0107\70\131\1\0\2\131"+
    "\2\300\1\137\3\0\105\300\25\0\4\u0108\7\0\10\u0108"+
    "\4\0\1\u0108\1\0\30\u0108\4\0\1\u0108\2\303\1\0"+
    "\2\303\1\0\105\303\2\144\1\0\2\144\1\0\55\144"+
    "\1\u0109\31\144\1\0\2\144\1\0\50\144\1\u010a\36\144"+
    "\1\0\2\144\1\0\52\144\1\u010b\15\144\1\u010c\16\144"+
    "\1\0\2\144\1\0\56\144\1\u010d\26\144\25\0\4\45"+
    "\7\0\10\45\4\0\1\45\1\0\20\45\1\u010e\7\45"+
    "\4\0\1\45\25\0\4\45\7\0\10\45\4\0\1\45"+
    "\1\0\17\45\1\u010f\10\45\4\0\1\45\25\0\4\170"+
    "\23\0\1\315\55\0\1\316\4\0\1\u0110\113\0\4\320"+
    "\107\0\4\320\23\0\1\u0111\63\0\4\321\7\0\3\321"+
    "\11\0\1\u0112\1\0\6\321\54\0\2\322\25\0\1\u0113"+
    "\63\0\3\323\24\0\1\u0114\72\0\1\u0115\116\0\10\330"+
    "\4\0\1\330\1\0\30\330\30\0\1\330\1\0\4\330"+
    "\7\0\10\330\4\0\1\330\1\0\30\330\4\0\1\330"+
    "\25\0\4\45\7\0\10\45\4\0\1\45\1\0\12\45"+
    "\1\u0116\15\45\4\0\1\45\25\0\4\45\7\0\10\45"+
    "\4\0\1\45\1\0\5\45\1\u0117\22\45\4\0\1\45"+
    "\25\0\3\u0118\25\0\1\333\62\0\4\u0119\7\0\3\u0119"+
    "\12\0\1\333\6\u0119\54\0\4\u011a\7\0\3\u011a\12\0"+
    "\1\333\6\u011a\54\0\4\u011b\7\0\3\u011b\12\0\1\333"+
    "\6\u011b\54\0\4\45\7\0\10\45\4\0\1\45\1\0"+
    "\4\45\1\u011c\23\45\4\0\1\45\25\0\4\45\7\0"+
    "\10\45\4\0\1\45\1\0\13\45\1\u011d\14\45\4\0"+
    "\1\45\25\0\4\45\7\0\10\45\4\0\1\45\1\0"+
    "\1\u011e\27\45\4\0\1\45\25\0\4\45\7\0\10\45"+
    "\4\0\1\45\1\0\20\45\1\u011f\1\u0120\6\45\4\0"+
    "\1\45\25\0\4\45\7\0\10\45\4\0\1\45\1\0"+
    "\4\45\1\u0121\23\45\4\0\1\45\25\0\4\45\7\0"+
    "\10\45\4\0\1\45\1\0\16\45\1\u0122\11\45\4\0"+
    "\1\45\25\0\4\45\7\0\10\45\4\0\1\45\1\0"+
    "\4\45\1\u0123\23\45\4\0\1\45\25\0\4\45\7\0"+
    "\10\45\4\0\1\45\1\0\13\45\1\u0124\14\45\4\0"+
    "\1\45\25\0\4\45\7\0\10\45\4\0\1\45\1\0"+
    "\20\45\1\u0125\7\45\4\0\1\45\25\0\4\45\7\0"+
    "\10\45\4\0\1\45\1\0\15\45\1\u0126\12\45\4\0"+
    "\1\45\25\0\4\45\7\0\10\45\4\0\1\45\1\0"+
    "\12\45\1\u0127\2\45\1\u0128\12\45\4\0\1\45\25\0"+
    "\4\45\7\0\10\45\4\0\1\45\1\0\4\45\1\u0129"+
    "\23\45\4\0\1\45\25\0\4\45\7\0\10\45\4\0"+
    "\1\45\1\0\4\45\1\u012a\23\45\4\0\1\45\25\0"+
    "\4\45\7\0\10\45\4\0\1\45\1\0\11\45\1\u012b"+
    "\16\45\4\0\1\45\25\0\4\45\7\0\10\45\4\0"+
    "\1\45\1\0\2\45\1\u012c\25\45\4\0\1\45\25\0"+
    "\4\45\7\0\10\45\4\0\1\45\1\0\22\45\1\u012d"+
    "\5\45\4\0\1\45\25\0\4\45\7\0\10\45\4\0"+
    "\1\45\1\0\4\45\1\u012e\23\45\4\0\1\45\25\0"+
    "\4\45\7\0\10\45\4\0\1\45\1\0\22\45\1\u012f"+
    "\5\45\4\0\1\45\25\0\4\45\7\0\10\45\4\0"+
    "\1\45\1\0\2\45\1\u0130\25\45\4\0\1\45\25\0"+
    "\4\45\7\0\10\45\4\0\1\45\1\0\4\45\1\u0131"+
    "\23\45\4\0\1\45\25\0\4\45\7\0\10\45\4\0"+
    "\1\45\1\0\17\45\1\u0132\10\45\4\0\1\45\25\0"+
    "\4\45\7\0\10\45\4\0\1\45\1\0\4\45\1\u0133"+
    "\23\45\4\0\1\45\25\0\4\45\7\0\10\45\4\0"+
    "\1\45\1\0\24\45\1\u0134\3\45\4\0\1\45\25\0"+
    "\4\45\7\0\10\45\4\0\1\45\1\0\21\45\1\u0135"+
    "\6\45\4\0\1\45\25\0\4\45\7\0\10\45\4\0"+
    "\1\45\1\0\22\45\1\u0136\5\45\4\0\1\45\25\0"+
    "\4\45\7\0\10\45\4\0\1\45\1\0\4\45\1\u0137"+
    "\23\45\4\0\1\45\25\0\4\45\7\0\10\45\4\0"+
    "\1\45\1\0\4\45\1\u0138\23\45\4\0\1\45\25\0"+
    "\4\45\7\0\10\45\4\0\1\45\1\0\15\45\1\u0139"+
    "\12\45\4\0\1\45\25\0\4\45\7\0\10\45\4\0"+
    "\1\45\1\0\1\u013a\27\45\4\0\1\45\25\0\4\45"+
    "\7\0\10\45\4\0\1\45\1\0\1\u013b\27\45\4\0"+
    "\1\45\24\0\1\u0110\113\0\4\125\7\0\10\125\4\0"+
    "\1\125\1\0\1\u013c\27\125\4\0\1\125\2\131\1\0"+
    "\2\131\1\0\16\131\1\u013d\63\131\1\0\2\131\2\144"+
    "\1\0\2\144\1\0\60\144\1\u013e\26\144\1\0\2\144"+
    "\1\0\56\144\1\u013f\30\144\1\0\2\144\1\0\62\144"+
    "\1\u0140\24\144\1\0\2\144\1\0\54\144\1\u0141\32\144"+
    "\1\0\2\144\1\0\52\144\1\u0142\32\144\25\0\4\45"+
    "\7\0\10\45\4\0\1\45\1\0\4\45\1\u0143\23\45"+
    "\4\0\1\45\25\0\4\45\7\0\10\45\4\0\1\45"+
    "\1\0\15\45\1\u0144\12\45\4\0\1\45\25\0\4\45"+
    "\7\0\10\45\4\0\1\45\1\0\5\45\1\u0145\22\45"+
    "\4\0\1\45\25\0\3\u0146\110\0\4\u0147\7\0\3\u0147"+
    "\13\0\6\u0147\54\0\4\u0148\7\0\3\u0148\13\0\6\u0148"+
    "\54\0\4\u0149\7\0\3\u0149\13\0\6\u0149\54\0\4\45"+
    "\7\0\10\45\4\0\1\45\1\0\17\45\1\u014a\10\45"+
    "\4\0\1\45\25\0\4\45\7\0\10\45\4\0\1\45"+
    "\1\0\10\45\1\u014b\17\45\4\0\1\45\25\0\4\45"+
    "\7\0\10\45\4\0\1\45\1\0\11\45\1\u014c\16\45"+
    "\4\0\1\45\25\0\4\45\7\0\10\45\4\0\1\45"+
    "\1\0\21\45\1\u014d\6\45\4\0\1\45\25\0\4\45"+
    "\7\0\10\45\4\0\1\45\1\0\10\45\1\u014e\17\45"+
    "\4\0\1\45\25\0\4\45\7\0\10\45\4\0\1\45"+
    "\1\0\17\45\1\u014f\10\45\4\0\1\45\25\0\4\45"+
    "\7\0\10\45\4\0\1\45\1\0\4\45\1\u0150\23\45"+
    "\4\0\1\45\25\0\4\45\7\0\10\45\4\0\1\45"+
    "\1\0\4\45\1\u0151\23\45\4\0\1\45\25\0\4\45"+
    "\7\0\10\45\4\0\1\45\1\0\17\45\1\u0152\10\45"+
    "\4\0\1\45\25\0\4\45\7\0\10\45\4\0\1\45"+
    "\1\0\17\45\1\u0153\10\45\4\0\1\45\25\0\4\45"+
    "\7\0\10\45\4\0\1\45\1\0\5\45\1\u0154\22\45"+
    "\4\0\1\45\25\0\4\45\7\0\10\45\4\0\1\45"+
    "\1\0\7\45\1\u0155\20\45\4\0\1\45\25\0\4\45"+
    "\7\0\10\45\4\0\1\45\1\0\12\45\1\u0156\15\45"+
    "\4\0\1\45\25\0\4\45\7\0\10\45\4\0\1\45"+
    "\1\0\17\45\1\u0157\10\45\4\0\1\45\25\0\4\45"+
    "\7\0\10\45\4\0\1\45\1\0\11\45\1\u0158\16\45"+
    "\4\0\1\45\25\0\4\45\7\0\10\45\4\0\1\45"+
    "\1\0\2\45\1\u0159\25\45\4\0\1\45\25\0\4\45"+
    "\7\0\10\45\4\0\1\45\1\0\4\45\1\u015a\23\45"+
    "\4\0\1\45\25\0\4\45\7\0\10\45\4\0\1\45"+
    "\1\0\15\45\1\u015b\12\45\4\0\1\45\25\0\4\45"+
    "\7\0\10\45\4\0\1\45\1\0\14\45\1\u015c\13\45"+
    "\4\0\1\45\25\0\4\45\7\0\10\45\4\0\1\45"+
    "\1\0\10\45\1\u015d\17\45\4\0\1\45\25\0\4\45"+
    "\7\0\10\45\4\0\1\45\1\0\2\45\1\u015e\25\45"+
    "\4\0\1\45\25\0\4\45\7\0\10\45\4\0\1\45"+
    "\1\0\15\45\1\u015f\12\45\4\0\1\45\25\0\4\45"+
    "\7\0\10\45\4\0\1\45\1\0\14\45\1\u0160\13\45"+
    "\4\0\1\45\25\0\4\45\7\0\10\45\4\0\1\45"+
    "\1\0\5\45\1\u0161\22\45\4\0\1\45\25\0\4\45"+
    "\7\0\10\45\4\0\1\45\1\0\21\45\1\u0162\6\45"+
    "\4\0\1\45\25\0\4\125\7\0\10\125\4\0\1\125"+
    "\1\0\21\125\1\u0163\6\125\4\0\1\125\2\144\1\0"+
    "\2\144\1\0\64\144\1\u0164\20\144\2\u013f\1\0\2\u013f"+
    "\1\0\105\u013f\2\144\1\0\2\144\1\0\72\144\1\u0165"+
    "\14\144\1\0\2\144\1\0\67\144\1\u0166\17\144\1\0"+
    "\2\144\1\0\65\144\1\u0167\17\144\25\0\4\45\7\0"+
    "\10\45\4\0\1\45\1\0\1\45\1\u0168\26\45\4\0"+
    "\1\45\25\0\4\45\7\0\10\45\4\0\1\45\1\0"+
    "\20\45\1\u0169\7\45\4\0\1\45\51\0\1\u016a\3\0"+
    "\1\333\62\0\4\u016b\7\0\3\u016b\13\0\6\u016b\54\0"+
    "\4\u016c\7\0\3\u016c\13\0\6\u016c\100\0\1\u016d\3\0"+
    "\1\333\62\0\4\45\7\0\10\45\4\0\1\45\1\0"+
    "\21\45\1\u016e\6\45\4\0\1\45\25\0\4\45\7\0"+
    "\10\45\4\0\1\45\1\0\2\45\1\u016f\25\45\4\0"+
    "\1\45\25\0\4\45\7\0\10\45\4\0\1\45\1\0"+
    "\14\45\1\u0170\13\45\4\0\1\45\25\0\4\45\7\0"+
    "\10\45\4\0\1\45\1\0\13\45\1\u0171\14\45\4\0"+
    "\1\45\25\0\4\45\7\0\10\45\4\0\1\45\1\0"+
    "\21\45\1\u0172\6\45\4\0\1\45\25\0\4\45\7\0"+
    "\10\45\4\0\1\45\1\0\5\45\1\u0173\22\45\4\0"+
    "\1\45\25\0\4\45\7\0\10\45\4\0\1\45\1\0"+
    "\21\45\1\u0174\6\45\4\0\1\45\25\0\4\45\7\0"+
    "\10\45\4\0\1\45\1\0\4\45\1\u0175\23\45\4\0"+
    "\1\45\25\0\4\45\7\0\10\45\4\0\1\45\1\0"+
    "\14\45\1\u0176\13\45\4\0\1\45\25\0\4\45\7\0"+
    "\10\45\4\0\1\45\1\0\21\45\1\u0177\6\45\4\0"+
    "\1\45\25\0\4\45\7\0\10\45\4\0\1\45\1\0"+
    "\3\45\1\u0178\24\45\4\0\1\45\25\0\4\45\7\0"+
    "\10\45\4\0\1\45\1\0\5\45\1\u0179\22\45\4\0"+
    "\1\45\25\0\4\45\7\0\10\45\4\0\1\45\1\0"+
    "\2\45\1\u017a\25\45\4\0\1\45\25\0\4\45\7\0"+
    "\10\45\4\0\1\45\1\0\21\45\1\u017b\6\45\4\0"+
    "\1\45\25\0\4\45\7\0\10\45\4\0\1\45\1\0"+
    "\5\45\1\u017c\22\45\4\0\1\45\25\0\4\45\7\0"+
    "\10\45\4\0\1\45\1\0\4\45\1\u017d\23\45\4\0"+
    "\1\45\25\0\4\45\7\0\10\45\4\0\1\45\1\0"+
    "\10\45\1\u017e\17\45\4\0\1\45\25\0\4\125\7\0"+
    "\10\125\4\0\1\125\1\0\10\125\1\u017f\17\125\4\0"+
    "\1\125\2\144\1\0\2\144\1\0\54\144\1\u013f\32\144"+
    "\1\0\2\144\1\0\53\144\1\u0164\33\144\1\0\2\144"+
    "\1\0\71\144\1\u013f\15\144\1\0\2\144\1\0\64\144"+
    "\1\u0180\20\144\25\0\4\45\7\0\10\45\4\0\1\45"+
    "\1\0\1\u0181\27\45\4\0\1\45\25\0\4\45\7\0"+
    "\10\45\4\0\1\45\1\0\4\45\1\u0182\23\45\4\0"+
    "\1\45\25\0\3\u0183\110\0\4\u0184\7\0\3\u0184\13\0"+
    "\6\u0184\54\0\4\216\7\0\3\216\13\0\6\216\132\0"+
    "\1\u0185\34\0\4\45\7\0\10\45\4\0\1\45\1\0"+
    "\22\45\1\u0186\5\45\4\0\1\45\25\0\4\45\7\0"+
    "\10\45\4\0\1\45\1\0\4\45\1\u0187\23\45\4\0"+
    "\1\45\25\0\4\45\7\0\10\45\4\0\1\45\1\0"+
    "\1\u0188\27\45\4\0\1\45\25\0\4\45\7\0\10\45"+
    "\4\0\1\45\1\0\26\45\1\u0189\1\45\4\0\1\45"+
    "\25\0\4\45\7\0\10\45\4\0\1\45\1\0\12\45"+
    "\1\u018a\15\45\4\0\1\45\25\0\4\125\7\0\10\125"+
    "\4\0\1\125\1\0\12\125\1\u018b\15\125\4\0\1\125"+
    "\2\144\1\0\2\144\1\0\55\144\1\u018c\27\144\25\0"+
    "\4\45\7\0\10\45\4\0\1\45\1\0\12\45\1\u018d"+
    "\15\45\4\0\1\45\25\0\4\45\7\0\10\45\4\0"+
    "\1\45\1\0\21\45\1\u018e\6\45\4\0\1\45\25\0"+
    "\3\u018f\110\0\4\u011a\7\0\3\u011a\13\0\6\u011a\54\0"+
    "\4\u0190\7\0\3\u0190\13\0\6\u0190\54\0\4\45\7\0"+
    "\10\45\4\0\1\45\1\0\4\45\1\u0191\23\45\4\0"+
    "\1\45\25\0\4\45\7\0\10\45\4\0\1\45\1\0"+
    "\14\45\1\u0192\13\45\4\0\1\45\25\0\4\45\7\0"+
    "\10\45\4\0\1\45\1\0\2\45\1\u0193\25\45\4\0"+
    "\1\45\25\0\4\45\7\0\10\45\4\0\1\45\1\0"+
    "\16\45\1\u0194\11\45\4\0\1\45\25\0\4\45\7\0"+
    "\10\45\4\0\1\45\1\0\4\45\1\u0195\23\45\4\0"+
    "\1\45\25\0\4\125\7\0\10\125\4\0\1\125\1\0"+
    "\4\125\1\u0196\23\125\4\0\1\125\2\144\1\0\2\144"+
    "\1\0\60\144\1\u010a\24\144\25\0\4\45\7\0\10\45"+
    "\4\0\1\45\1\0\15\45\1\u0197\12\45\4\0\1\45"+
    "\25\0\3\u0198\110\0\4\u0199\7\0\3\u0199\13\0\6\u0199"+
    "\54\0\4\45\7\0\10\45\4\0\1\45\1\0\21\45"+
    "\1\u019a\6\45\4\0\1\45\25\0\4\45\7\0\10\45"+
    "\4\0\1\45\1\0\4\45\1\u019b\23\45\4\0\1\45"+
    "\25\0\4\45\7\0\10\45\4\0\1\45\1\0\4\45"+
    "\1\u019c\23\45\4\0\1\45\25\0\4\45\7\0\10\45"+
    "\4\0\1\45\1\0\5\45\1\u019d\22\45\4\0\1\45"+
    "\51\0\1\u019e\3\0\1\333\106\0\1\u019f\3\0\1\333"+
    "\62\0\4\45\7\0\10\45\4\0\1\45\1\0\20\45"+
    "\1\u01a0\7\45\4\0\1\45\25\0\3\u01a1\166\0\1\u0148"+
    "\34\0\3\u01a2\110\0\3\216\63\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[23025];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\11\3\1\1\11\4\1\3\11\2\1\1\11"+
    "\6\1\1\11\10\1\2\11\25\1\1\11\1\1\5\11"+
    "\3\1\1\11\3\1\1\11\2\1\2\11\6\1\1\11"+
    "\5\1\1\11\2\0\2\11\1\0\2\1\1\11\7\1"+
    "\3\11\1\1\5\11\4\1\1\11\6\0\2\11\1\1"+
    "\3\11\1\0\1\11\1\0\1\11\1\1\1\0\1\1"+
    "\1\0\30\1\2\0\13\1\2\11\3\1\4\11\15\1"+
    "\2\11\3\0\4\1\2\11\2\0\3\1\1\11\2\0"+
    "\1\1\2\0\26\1\1\11\15\1\1\0\2\1\1\11"+
    "\7\1\1\11\4\0\1\11\2\1\4\0\53\1\2\0"+
    "\41\1\4\0\25\1\3\0\11\1\2\0\15\1\2\0"+
    "\1\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[418];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  private static final class State {
    final int lBraceCount;
    final int state;

    public State(int state, int lBraceCount) {
        this.state = state;
        this.lBraceCount = lBraceCount;
    }

    @Override
    public String toString() {
        return "yystate = " + state + (lBraceCount == 0 ? "" : "lBraceCount = " + lBraceCount);
    }
  }

  private final Stack<State> states = new Stack<State>();
  private int lBraceCount;

  private int commentStart;
  private int commentDepth;

  private void pushState(int state) {
    states.push(new State(yystate(), lBraceCount));
    lBraceCount = 0;
    yybegin(state);
  }

  private void popState() {
    State state = states.pop();
    lBraceCount = state.lBraceCount;
    yybegin(state.state);
  }

  private void popMaybeSemicolonState() {
     // if there is nested state with semicolon
     if (states.peek().state == MAYBE_SEMICOLON) {
       states.pop();
     }
     popState();
  }

  public _VlangLexer() {
    this((java.io.Reader)null);
 }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _VlangLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case MULTI_LINE_COMMENT_STATE: {
              int state = yystate();
        popState();
        zzStartRead = commentStart;
        return MULTI_LINE_COMMENT;
            }  // fall though
            case 419: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 148: break;
          case 2:
            { return WS;
            }
          // fall through
          case 149: break;
          case 3:
            { return NLS;
            }
          // fall through
          case 150: break;
          case 4:
            { pushState(MAYBE_SEMICOLON); return NOT;
            }
          // fall through
          case 151: break;
          case 5:
            { pushState(STRING); return OPEN_QUOTE;
            }
          // fall through
          case 152: break;
          case 6:
            { return DOLLAR;
            }
          // fall through
          case 153: break;
          case 7:
            { return REMAINDER;
            }
          // fall through
          case 154: break;
          case 8:
            { return BIT_AND;
            }
          // fall through
          case 155: break;
          case 9:
            { pushState(SINGLE_STRING); return OPEN_QUOTE;
            }
          // fall through
          case 156: break;
          case 10:
            { return LPAREN;
            }
          // fall through
          case 157: break;
          case 11:
            { pushState(MAYBE_SEMICOLON); return RPAREN;
            }
          // fall through
          case 158: break;
          case 12:
            { return MUL;
            }
          // fall through
          case 159: break;
          case 13:
            { return PLUS;
            }
          // fall through
          case 160: break;
          case 14:
            { return COMMA;
            }
          // fall through
          case 161: break;
          case 15:
            { return MINUS;
            }
          // fall through
          case 162: break;
          case 16:
            { return DOT;
            }
          // fall through
          case 163: break;
          case 17:
            { return QUOTIENT;
            }
          // fall through
          case 164: break;
          case 18:
            { pushState(MAYBE_SEMICOLON); return INT;
            }
          // fall through
          case 165: break;
          case 19:
            { pushState(MAYBE_SEMICOLON); return COLON;
            }
          // fall through
          case 166: break;
          case 20:
            { return SEMICOLON;
            }
          // fall through
          case 167: break;
          case 21:
            { return LESS;
            }
          // fall through
          case 168: break;
          case 22:
            { return ASSIGN;
            }
          // fall through
          case 169: break;
          case 23:
            { pushState(MAYBE_SEMICOLON); return GREATER;
            }
          // fall through
          case 170: break;
          case 24:
            { pushState(MAYBE_SEMICOLON); return QUESTION;
            }
          // fall through
          case 171: break;
          case 25:
            { return AT;
            }
          // fall through
          case 172: break;
          case 26:
            { pushState(MAYBE_SEMICOLON); return IDENTIFIER;
            }
          // fall through
          case 173: break;
          case 27:
            { return LBRACK;
            }
          // fall through
          case 174: break;
          case 28:
            { pushState(MAYBE_SEMICOLON); return RBRACK;
            }
          // fall through
          case 175: break;
          case 29:
            { return BIT_XOR;
            }
          // fall through
          case 176: break;
          case 30:
            { return BACKTICK;
            }
          // fall through
          case 177: break;
          case 31:
            { return LBRACE;
            }
          // fall through
          case 178: break;
          case 32:
            { return BIT_OR;
            }
          // fall through
          case 179: break;
          case 33:
            { pushState(MAYBE_SEMICOLON); return RBRACE;
            }
          // fall through
          case 180: break;
          case 34:
            { return TILDA;
            }
          // fall through
          case 181: break;
          case 35:
            { popMaybeSemicolonState(); yypushback(yytext().length());
            }
          // fall through
          case 182: break;
          case 36:
            { popMaybeSemicolonState();
                                            yypushback(yytext().length());
                                            return SEMICOLON_SYNTHETIC;
            }
          // fall through
          case 183: break;
          case 37:
            { return LITERAL_STRING_TEMPLATE_ENTRY;
            }
          // fall through
          case 184: break;
          case 38:
            { popState(); pushState(MAYBE_SEMICOLON); return CLOSING_QUOTE;
            }
          // fall through
          case 185: break;
          case 39:
            { 
            }
          // fall through
          case 186: break;
          case 40:
            { lBraceCount++; return LBRACE;
            }
          // fall through
          case 187: break;
          case 41:
            { if (lBraceCount == 0) {
                                                      popState();
                                                      return TEMPLATE_ENTRY_END;
                                                    }
                                                    lBraceCount--;
                                                    pushState(MAYBE_SEMICOLON);
                                                    return RBRACE;
            }
          // fall through
          case 188: break;
          case 42:
            { popState(); return IDENTIFIER;
            }
          // fall through
          case 189: break;
          case 43:
            { return IDENTIFIER;
            }
          // fall through
          case 190: break;
          case 44:
            { yybegin(ASM_BLOCK_LINE); return LBRACE;
            }
          // fall through
          case 191: break;
          case 45:
            { return ASM_LINE;
            }
          // fall through
          case 192: break;
          case 46:
            { yybegin(MAYBE_SEMICOLON); return RBRACE;
            }
          // fall through
          case 193: break;
          case 47:
            { return SAFE_DOT;
            }
          // fall through
          case 194: break;
          case 48:
            { return NOT_EQ;
            }
          // fall through
          case 195: break;
          case 49:
            { return HASH_COMMENT;
            }
          // fall through
          case 196: break;
          case 50:
            { return HASH_LBRACK;
            }
          // fall through
          case 197: break;
          case 51:
            { return REMAINDER_ASSIGN;
            }
          // fall through
          case 198: break;
          case 52:
            { return COND_AND;
            }
          // fall through
          case 199: break;
          case 53:
            { return BIT_AND_ASSIGN;
            }
          // fall through
          case 200: break;
          case 54:
            { return BIT_CLEAR;
            }
          // fall through
          case 201: break;
          case 55:
            { return MUL_ASSIGN;
            }
          // fall through
          case 202: break;
          case 56:
            { pushState(MAYBE_SEMICOLON); return PLUS_PLUS;
            }
          // fall through
          case 203: break;
          case 57:
            { return PLUS_ASSIGN;
            }
          // fall through
          case 204: break;
          case 58:
            { pushState(MAYBE_SEMICOLON); return MINUS_MINUS;
            }
          // fall through
          case 205: break;
          case 59:
            { return MINUS_ASSIGN;
            }
          // fall through
          case 206: break;
          case 60:
            { return RANGE;
            }
          // fall through
          case 207: break;
          case 61:
            { pushState(MAYBE_SEMICOLON); return FLOAT;
            }
          // fall through
          case 208: break;
          case 62:
            { pushState(MULTI_LINE_COMMENT_STATE);
    commentDepth = 0;
    commentStart = getTokenStart();
            }
          // fall through
          case 209: break;
          case 63:
            { return DOC_COMMENT;
            }
          // fall through
          case 210: break;
          case 64:
            { return QUOTIENT_ASSIGN;
            }
          // fall through
          case 211: break;
          case 65:
            { return VAR_ASSIGN;
            }
          // fall through
          case 212: break;
          case 66:
            { return SEND_CHANNEL;
            }
          // fall through
          case 213: break;
          case 67:
            { return SHIFT_LEFT;
            }
          // fall through
          case 214: break;
          case 68:
            { return LESS_OR_EQUAL;
            }
          // fall through
          case 215: break;
          case 69:
            { return EQ;
            }
          // fall through
          case 216: break;
          case 70:
            { return GREATER_OR_EQUAL;
            }
          // fall through
          case 217: break;
          case 71:
            { return AT_LBRACK;
            }
          // fall through
          case 218: break;
          case 72:
            { return BIT_XOR_ASSIGN;
            }
          // fall through
          case 219: break;
          case 73:
            { pushState(MAYBE_SEMICOLON); return CHAR;
            }
          // fall through
          case 220: break;
          case 74:
            { return AS ;
            }
          // fall through
          case 221: break;
          case 75:
            { return FN;
            }
          // fall through
          case 222: break;
          case 76:
            { return GO;
            }
          // fall through
          case 223: break;
          case 77:
            { return IF;
            }
          // fall through
          case 224: break;
          case 78:
            { return IN;
            }
          // fall through
          case 225: break;
          case 79:
            { return IS;
            }
          // fall through
          case 226: break;
          case 80:
            { return OR;
            }
          // fall through
          case 227: break;
          case 81:
            { return BIT_OR_ASSIGN;
            }
          // fall through
          case 228: break;
          case 82:
            { return COND_OR;
            }
          // fall through
          case 229: break;
          case 83:
            { return LINE_COMMENT;
            }
          // fall through
          case 230: break;
          case 84:
            { pushState(SHORT_TEMPLATE_ENTRY);
                                                   yypushback(yylength() - 1);
                                                   return SHORT_TEMPLATE_ENTRY_START;
            }
          // fall through
          case 231: break;
          case 85:
            { pushState(LONG_TEMPLATE_ENTRY); return LONG_TEMPLATE_ENTRY_START;
            }
          // fall through
          case 232: break;
          case 86:
            { return LITERAL_STRING_TEMPLATE_ESCAPE_ENTRY;
            }
          // fall through
          case 233: break;
          case 87:
            { if (commentDepth > 0) {
            commentDepth--;
        } else {
             int state = yystate();
             popState();
             zzStartRead = commentStart;
             return MULTI_LINE_COMMENT;
        }
            }
          // fall through
          case 234: break;
          case 88:
            { commentDepth++;
            }
          // fall through
          case 235: break;
          case 89:
            { return NOT_IN;
            }
          // fall through
          case 236: break;
          case 90:
            { return NOT_IS;
            }
          // fall through
          case 237: break;
          case 91:
            { return SHEBANG;
            }
          // fall through
          case 238: break;
          case 92:
            { return IF_COMPILE_TIME;
            }
          // fall through
          case 239: break;
          case 93:
            { return BIT_CLEAR_ASSIGN;
            }
          // fall through
          case 240: break;
          case 94:
            { return TRIPLE_DOT;
            }
          // fall through
          case 241: break;
          case 95:
            { pushState(MAYBE_SEMICOLON); return HEX;
            }
          // fall through
          case 242: break;
          case 96:
            { pushState(MAYBE_SEMICOLON); return BIN;
            }
          // fall through
          case 243: break;
          case 97:
            { pushState(MAYBE_SEMICOLON); return OCT;
            }
          // fall through
          case 244: break;
          case 98:
            { return SHIFT_LEFT_ASSIGN;
            }
          // fall through
          case 245: break;
          case 99:
            { return SHIFT_RIGHT_ASSIGN;
            }
          // fall through
          case 246: break;
          case 100:
            { pushState(MAYBE_SEMICOLON); return BAD_CHARACTER;
            }
          // fall through
          case 247: break;
          case 101:
            { pushState(ASM_BLOCK); return ASM;
            }
          // fall through
          case 248: break;
          case 102:
            { return FOR;
            }
          // fall through
          case 249: break;
          case 103:
            { return MUT;
            }
          // fall through
          case 250: break;
          case 104:
            { pushState(MAYBE_SEMICOLON); return NIL;
            }
          // fall through
          case 251: break;
          case 105:
            { return PUB;
            }
          // fall through
          case 252: break;
          case 106:
            { pushState(MAYBE_SEMICOLON); return RAW_STRING;
            }
          // fall through
          case 253: break;
          case 107:
            { yypushback(3); pushState(MAYBE_SEMICOLON); return NOT;
            }
          // fall through
          case 254: break;
          case 108:
            { return FOR_COMPILE_TIME;
            }
          // fall through
          case 255: break;
          case 109:
            { return MULTI_LINE_COMMENT;
            }
          // fall through
          case 256: break;
          case 110:
            { return UNSIGNED_SHIFT_RIGHT_ASSIGN;
            }
          // fall through
          case 257: break;
          case 111:
            { return DUMP;
            }
          // fall through
          case 258: break;
          case 112:
            { return ELSE;
            }
          // fall through
          case 259: break;
          case 113:
            { return ENUM;
            }
          // fall through
          case 260: break;
          case 114:
            { return GOTO;
            }
          // fall through
          case 261: break;
          case 115:
            { return LOCK;
            }
          // fall through
          case 262: break;
          case 116:
            { pushState(MAYBE_SEMICOLON); return NONE;
            }
          // fall through
          case 263: break;
          case 117:
            { pushState(MAYBE_SEMICOLON); return TRUE;
            }
          // fall through
          case 264: break;
          case 118:
            { return TYPE_;
            }
          // fall through
          case 265: break;
          case 119:
            { return COMPILE_DIRECTIVE;
            }
          // fall through
          case 266: break;
          case 120:
            { return ELSE_COMPILE_TIME;
            }
          // fall through
          case 267: break;
          case 121:
            { pushState(MAYBE_SEMICOLON); return BREAK;
            }
          // fall through
          case 268: break;
          case 122:
            { return CONST;
            }
          // fall through
          case 269: break;
          case 123:
            { return DEFER;
            }
          // fall through
          case 270: break;
          case 124:
            { pushState(MAYBE_SEMICOLON); return FALSE;
            }
          // fall through
          case 271: break;
          case 125:
            { return MATCH;
            }
          // fall through
          case 272: break;
          case 126:
            { return RLOCK;
            }
          // fall through
          case 273: break;
          case 127:
            { return SPAWN;
            }
          // fall through
          case 274: break;
          case 128:
            { return UNION;
            }
          // fall through
          case 275: break;
          case 129:
            { return ASSERT;
            }
          // fall through
          case 276: break;
          case 130:
            { return ATOMIC;
            }
          // fall through
          case 277: break;
          case 131:
            { return IMPORT ;
            }
          // fall through
          case 278: break;
          case 132:
            { return MODULE;
            }
          // fall through
          case 279: break;
          case 133:
            { pushState(MAYBE_SEMICOLON); return RETURN;
            }
          // fall through
          case 280: break;
          case 134:
            { return SELECT;
            }
          // fall through
          case 281: break;
          case 135:
            { return SHARED;
            }
          // fall through
          case 282: break;
          case 136:
            { return SIZEOF;
            }
          // fall through
          case 283: break;
          case 137:
            { return STATIC;
            }
          // fall through
          case 284: break;
          case 138:
            { return STRUCT;
            }
          // fall through
          case 285: break;
          case 139:
            { return TYPEOF;
            }
          // fall through
          case 286: break;
          case 140:
            { return UNSAFE;
            }
          // fall through
          case 287: break;
          case 141:
            { return BUILTIN_GLOBAL;
            }
          // fall through
          case 288: break;
          case 142:
            { pushState(MAYBE_SEMICOLON); return CONTINUE;
            }
          // fall through
          case 289: break;
          case 143:
            { return VOLATILE;
            }
          // fall through
          case 290: break;
          case 144:
            { return INTERFACE;
            }
          // fall through
          case 291: break;
          case 145:
            { return ISREFTYPE;
            }
          // fall through
          case 292: break;
          case 146:
            { return OFFSETOF;
            }
          // fall through
          case 293: break;
          case 147:
            { return IMPLEMENTS;
            }
          // fall through
          case 294: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
