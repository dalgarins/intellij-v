// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: v.flex

package io.vlang.lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.Stack;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static io.vlang.lang.psi.VlangTokenTypes.*;
import static io.vlang.lang.psi.VlangDocElementTypes.*;


public class _VlangLexer implements FlexLexer, VlangTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MAYBE_SEMICOLON = 2;
  public static final int STRING = 4;
  public static final int SINGLE_STRING = 6;
  public static final int MULTI_LINE_COMMENT_STATE = 8;
  public static final int LONG_TEMPLATE_ENTRY = 10;
  public static final int SHORT_TEMPLATE_ENTRY = 12;
  public static final int ASM_BLOCK = 14;
  public static final int ASM_BLOCK_LINE = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8, 8
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u1f00\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u0100\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u1f00\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u1f00\1\u4d00\1\u4e00"+
    "\1\u4f00\1\u1f00\3\u0100\1\u5000\1\u5100\1\u5200\12\u1f00\4\u0100"+
    "\1\u5300\17\u1f00\2\u0100\1\u5400\41\u1f00\2\u0100\1\u5500\1\u5600"+
    "\2\u1f00\1\u5700\1\u5800\27\u0100\1\u5900\2\u0100\1\u5a00\45\u1f00"+
    "\1\u0100\1\u5b00\1\u5c00\11\u1f00\1\u5d00\27\u1f00\1\u5e00\1\u5f00"+
    "\1\u6000\1\u6100\11\u1f00\1\u6200\1\u6300\5\u1f00\1\u6400\1\u6500"+
    "\4\u1f00\1\u6600\21\u1f00\246\u0100\1\u6700\20\u0100\1\u6800\1\u6900"+
    "\25\u0100\1\u6a00\34\u0100\1\u6b00\14\u1f00\2\u0100\1\u6c00\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\6\27\2\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\41\1\43\1\41"+
    "\3\44\1\45\2\44\1\46\5\44\1\47\1\44\1\50"+
    "\1\44\1\51\1\52\2\44\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\44\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\44\1\100\1\101\1\102\1\103\1\104"+
    "\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114"+
    "\6\0\1\3\44\0\1\44\12\0\1\44\4\0\1\44"+
    "\5\0\27\44\1\0\37\44\1\0\u01ca\44\4\0\14\44"+
    "\16\0\5\44\7\0\1\44\1\0\1\44\201\0\5\44"+
    "\1\0\2\44\2\0\4\44\1\0\1\44\6\0\1\44"+
    "\1\0\3\44\1\0\1\44\1\0\24\44\1\0\123\44"+
    "\1\0\213\44\10\0\246\44\1\0\46\44\2\0\1\44"+
    "\6\0\51\44\107\0\33\44\4\0\4\44\55\0\53\44"+
    "\25\0\12\115\4\0\2\44\1\0\143\44\1\0\1\44"+
    "\17\0\2\44\7\0\2\44\12\115\3\44\2\0\1\44"+
    "\20\0\1\44\1\0\36\44\35\0\131\44\13\0\1\44"+
    "\16\0\12\115\41\44\11\0\2\44\4\0\1\44\5\0"+
    "\26\44\4\0\1\44\11\0\1\44\3\0\1\44\27\0"+
    "\31\44\7\0\13\44\65\0\25\44\1\0\10\44\106\0"+
    "\66\44\3\0\1\44\22\0\1\44\7\0\12\44\4\0"+
    "\12\115\1\0\20\44\4\0\10\44\2\0\2\44\2\0"+
    "\26\44\1\0\7\44\1\0\1\44\3\0\4\44\3\0"+
    "\1\44\20\0\1\44\15\0\2\44\1\0\3\44\4\0"+
    "\12\115\2\44\12\0\1\44\10\0\6\44\4\0\2\44"+
    "\2\0\26\44\1\0\7\44\1\0\2\44\1\0\2\44"+
    "\1\0\2\44\37\0\4\44\1\0\1\44\7\0\12\115"+
    "\2\0\3\44\20\0\11\44\1\0\3\44\1\0\26\44"+
    "\1\0\7\44\1\0\2\44\1\0\5\44\3\0\1\44"+
    "\22\0\1\44\17\0\2\44\4\0\12\115\11\0\1\44"+
    "\13\0\10\44\2\0\2\44\2\0\26\44\1\0\7\44"+
    "\1\0\2\44\1\0\5\44\3\0\1\44\36\0\2\44"+
    "\1\0\3\44\4\0\12\115\1\0\1\44\21\0\1\44"+
    "\1\0\6\44\3\0\3\44\1\0\4\44\3\0\2\44"+
    "\1\0\1\44\1\0\2\44\3\0\2\44\3\0\3\44"+
    "\3\0\14\44\26\0\1\44\25\0\12\115\25\0\10\44"+
    "\1\0\3\44\1\0\27\44\1\0\20\44\3\0\1\44"+
    "\32\0\3\44\5\0\2\44\4\0\12\115\20\0\1\44"+
    "\4\0\10\44\1\0\3\44\1\0\27\44\1\0\12\44"+
    "\1\0\5\44\3\0\1\44\40\0\1\44\1\0\2\44"+
    "\4\0\12\115\1\0\2\44\22\0\10\44\1\0\3\44"+
    "\1\0\51\44\2\0\1\44\20\0\1\44\5\0\3\44"+
    "\10\0\3\44\4\0\12\115\12\0\6\44\5\0\22\44"+
    "\3\0\30\44\1\0\11\44\1\0\1\44\2\0\7\44"+
    "\37\0\12\115\21\0\60\44\1\0\2\44\14\0\7\44"+
    "\11\0\12\115\47\0\2\44\1\0\1\44\1\0\5\44"+
    "\1\0\30\44\1\0\1\44\1\0\12\44\1\0\2\44"+
    "\11\0\1\44\2\0\5\44\1\0\1\44\11\0\12\115"+
    "\2\0\4\44\40\0\1\44\37\0\12\115\26\0\10\44"+
    "\1\0\44\44\33\0\5\44\163\0\53\44\24\0\1\44"+
    "\12\115\6\0\6\44\4\0\4\44\3\0\1\44\3\0"+
    "\2\44\7\0\3\44\4\0\15\44\14\0\1\44\1\0"+
    "\12\115\6\0\46\44\1\0\1\44\5\0\1\44\2\0"+
    "\53\44\1\0\115\44\1\0\4\44\2\0\7\44\1\0"+
    "\1\44\1\0\4\44\2\0\51\44\1\0\4\44\2\0"+
    "\41\44\1\0\4\44\2\0\7\44\1\0\1\44\1\0"+
    "\4\44\2\0\17\44\1\0\71\44\1\0\4\44\2\0"+
    "\103\44\45\0\20\44\20\0\126\44\2\0\6\44\3\0"+
    "\u016c\44\2\0\21\44\1\0\32\44\5\0\113\44\6\0"+
    "\10\44\7\0\15\44\1\0\4\44\16\0\22\44\16\0"+
    "\22\44\16\0\15\44\1\0\3\44\17\0\64\44\43\0"+
    "\1\44\4\0\1\44\3\0\12\115\46\0\12\115\6\0"+
    "\131\44\7\0\5\44\2\0\42\44\1\0\1\44\5\0"+
    "\106\44\12\0\37\44\47\0\12\115\36\44\2\0\5\44"+
    "\13\0\54\44\4\0\32\44\6\0\12\115\46\0\27\44"+
    "\11\0\65\44\53\0\12\115\6\0\12\115\15\0\1\44"+
    "\135\0\57\44\21\0\7\44\4\0\12\115\51\0\36\44"+
    "\15\0\2\44\12\115\54\44\32\0\44\44\34\0\12\115"+
    "\3\0\3\44\12\115\44\44\2\0\11\44\7\0\53\44"+
    "\2\0\3\44\51\0\4\44\1\0\6\44\1\0\2\44"+
    "\3\0\1\44\5\0\300\44\100\0\26\44\2\0\6\44"+
    "\2\0\46\44\2\0\6\44\2\0\10\44\1\0\1\44"+
    "\1\0\1\44\1\0\1\44\1\0\37\44\2\0\65\44"+
    "\1\0\7\44\1\0\1\44\3\0\3\44\1\0\7\44"+
    "\3\0\4\44\2\0\6\44\4\0\15\44\5\0\3\44"+
    "\1\0\7\44\53\0\2\3\107\0\1\44\15\0\1\44"+
    "\20\0\15\44\145\0\1\44\4\0\1\44\2\0\12\44"+
    "\1\0\1\44\3\0\5\44\6\0\1\44\1\0\1\44"+
    "\1\0\1\44\1\0\4\44\1\0\13\44\2\0\4\44"+
    "\5\0\5\44\4\0\1\44\64\0\2\44\u017b\0\57\44"+
    "\1\0\57\44\1\0\205\44\6\0\4\44\3\0\2\44"+
    "\14\0\46\44\1\0\1\44\5\0\1\44\2\0\70\44"+
    "\7\0\1\44\20\0\27\44\11\0\7\44\1\0\7\44"+
    "\1\0\7\44\1\0\7\44\1\0\7\44\1\0\7\44"+
    "\1\0\7\44\1\0\7\44\120\0\1\44\325\0\2\44"+
    "\52\0\5\44\5\0\2\44\4\0\126\44\6\0\3\44"+
    "\1\0\132\44\1\0\4\44\5\0\53\44\1\0\136\44"+
    "\21\0\33\44\65\0\306\44\112\0\360\44\20\0\215\44"+
    "\103\0\56\44\2\0\15\44\3\0\20\44\12\115\2\44"+
    "\24\0\57\44\20\0\37\44\2\0\106\44\61\0\11\44"+
    "\2\0\147\44\2\0\65\44\2\0\5\44\60\0\13\44"+
    "\1\0\3\44\1\0\4\44\1\0\27\44\35\0\64\44"+
    "\16\0\62\44\34\0\12\115\30\0\6\44\3\0\1\44"+
    "\1\0\2\44\1\0\12\115\34\44\12\0\27\44\31\0"+
    "\35\44\7\0\57\44\34\0\1\44\12\115\6\0\5\44"+
    "\1\0\12\44\12\115\5\44\1\0\51\44\27\0\3\44"+
    "\1\0\10\44\4\0\12\115\6\0\27\44\3\0\1\44"+
    "\3\0\62\44\1\0\1\44\3\0\2\44\2\0\5\44"+
    "\2\0\1\44\1\0\1\44\30\0\3\44\2\0\13\44"+
    "\7\0\3\44\14\0\6\44\2\0\6\44\2\0\6\44"+
    "\11\0\7\44\1\0\7\44\1\0\53\44\1\0\14\44"+
    "\10\0\163\44\15\0\12\115\6\0\244\44\14\0\27\44"+
    "\4\0\61\44\4\0\u0100\3\156\44\2\0\152\44\46\0"+
    "\7\44\14\0\5\44\5\0\1\44\1\0\12\44\1\0"+
    "\15\44\1\0\5\44\1\0\1\44\1\0\2\44\1\0"+
    "\2\44\1\0\154\44\41\0\153\44\22\0\100\44\2\0"+
    "\66\44\50\0\14\44\164\0\5\44\1\0\207\44\23\0"+
    "\12\115\7\0\32\44\6\0\32\44\13\0\131\44\3\0"+
    "\6\44\2\0\6\44\2\0\6\44\2\0\3\44\43\0"+
    "\14\44\1\0\32\44\1\0\23\44\1\0\2\44\1\0"+
    "\17\44\2\0\16\44\42\0\173\44\205\0\35\44\3\0"+
    "\61\44\57\0\40\44\15\0\24\44\1\0\10\44\6\0"+
    "\46\44\12\0\36\44\2\0\44\44\4\0\10\44\60\0"+
    "\236\44\2\0\12\115\6\0\44\44\4\0\44\44\4\0"+
    "\50\44\10\0\64\44\234\0\67\44\11\0\26\44\12\0"+
    "\10\44\230\0\6\44\2\0\1\44\1\0\54\44\1\0"+
    "\2\44\3\0\1\44\2\0\27\44\12\0\27\44\11\0"+
    "\37\44\101\0\23\44\1\0\2\44\12\0\26\44\12\0"+
    "\32\44\106\0\70\44\6\0\2\44\100\0\1\44\17\0"+
    "\4\44\1\0\3\44\1\0\35\44\52\0\35\44\3\0"+
    "\35\44\43\0\10\44\1\0\34\44\33\0\66\44\12\0"+
    "\26\44\12\0\23\44\15\0\22\44\156\0\111\44\67\0"+
    "\63\44\15\0\63\44\15\0\44\44\14\0\12\115\306\0"+
    "\35\44\12\0\1\44\10\0\26\44\232\0\27\44\14\0"+
    "\65\44\56\0\12\115\23\0\55\44\40\0\31\44\7\0"+
    "\12\115\11\0\44\44\17\0\12\115\4\0\1\44\13\0"+
    "\43\44\3\0\1\44\14\0\60\44\16\0\4\44\13\0"+
    "\12\115\1\44\1\0\1\44\43\0\22\44\1\0\31\44"+
    "\124\0\7\44\1\0\1\44\1\0\4\44\1\0\17\44"+
    "\1\0\12\44\7\0\57\44\21\0\12\115\13\0\10\44"+
    "\2\0\2\44\2\0\26\44\1\0\7\44\1\0\2\44"+
    "\1\0\5\44\3\0\1\44\22\0\1\44\14\0\5\44"+
    "\236\0\65\44\22\0\4\44\5\0\12\115\5\0\1\44"+
    "\40\0\60\44\24\0\2\44\1\0\1\44\10\0\12\115"+
    "\246\0\57\44\51\0\4\44\44\0\60\44\24\0\1\44"+
    "\13\0\12\115\46\0\53\44\15\0\1\44\7\0\12\115"+
    "\66\0\33\44\25\0\12\115\306\0\54\44\164\0\100\44"+
    "\12\115\25\0\1\44\240\0\10\44\2\0\47\44\20\0"+
    "\1\44\1\0\1\44\34\0\1\44\12\0\50\44\7\0"+
    "\1\44\25\0\1\44\13\0\56\44\23\0\1\44\42\0"+
    "\71\44\7\0\11\44\1\0\45\44\21\0\1\44\17\0"+
    "\12\115\30\0\36\44\160\0\7\44\1\0\2\44\1\0"+
    "\46\44\25\0\1\44\11\0\12\115\6\0\6\44\1\0"+
    "\2\44\1\0\40\44\16\0\1\44\7\0\12\115\u0136\0"+
    "\23\44\15\0\232\44\346\0\304\44\274\0\57\44\321\0"+
    "\107\44\271\0\71\44\7\0\37\44\1\0\12\115\146\0"+
    "\36\44\22\0\60\44\20\0\4\44\14\0\12\115\11\0"+
    "\25\44\5\0\23\44\260\0\100\44\200\0\113\44\5\0"+
    "\1\44\102\0\15\44\100\0\2\44\1\0\1\44\34\0"+
    "\370\44\10\0\363\44\15\0\37\44\61\0\3\44\21\0"+
    "\4\44\10\0\u018c\44\4\0\153\44\5\0\15\44\3\0"+
    "\11\44\7\0\12\44\146\0\125\44\1\0\107\44\1\0"+
    "\2\44\2\0\1\44\2\0\2\44\2\0\4\44\1\0"+
    "\14\44\1\0\1\44\1\0\7\44\1\0\101\44\1\0"+
    "\4\44\2\0\10\44\1\0\7\44\1\0\34\44\1\0"+
    "\4\44\1\0\5\44\1\0\1\44\3\0\7\44\1\0"+
    "\u0154\44\2\0\31\44\1\0\31\44\1\0\37\44\1\0"+
    "\31\44\1\0\37\44\1\0\31\44\1\0\37\44\1\0"+
    "\31\44\1\0\37\44\1\0\31\44\1\0\10\44\2\0"+
    "\62\115\55\44\12\0\7\44\2\0\12\115\4\0\1\44"+
    "\u0171\0\54\44\4\0\12\115\6\0\305\44\73\0\104\44"+
    "\7\0\1\44\4\0\12\115\246\0\4\44\1\0\33\44"+
    "\1\0\2\44\1\0\1\44\2\0\1\44\1\0\12\44"+
    "\1\0\4\44\1\0\1\44\1\0\1\44\6\0\1\44"+
    "\4\0\1\44\1\0\1\44\1\0\1\44\1\0\3\44"+
    "\1\0\2\44\1\0\1\44\2\0\1\44\1\0\1\44"+
    "\1\0\1\44\1\0\1\44\1\0\1\44\1\0\2\44"+
    "\1\0\1\44\2\0\4\44\1\0\7\44\1\0\4\44"+
    "\1\0\4\44\1\0\1\44\1\0\12\44\1\0\21\44"+
    "\5\0\3\44\1\0\5\44\1\0\21\44\104\0\327\44"+
    "\51\0\65\44\13\0\336\44\2\0\u0182\44\16\0\u0131\44"+
    "\37\0\36\44\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27904];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\2\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\4\32\1\33\1\34\1\35\1\32"+
    "\1\36\22\32\1\37\1\40\1\41\1\42\1\43\1\2"+
    "\1\44\2\43\1\45\1\46\1\45\1\1\1\45\3\47"+
    "\1\50\1\51\1\1\2\52\3\53\1\54\1\55\1\5"+
    "\1\11\2\55\1\56\2\0\1\57\1\60\1\0\2\61"+
    "\1\62\4\61\3\32\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\6\0\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\0\1\107\1\0\1\32\1\110\1\32\1\0\1\111"+
    "\1\0\1\112\10\32\1\113\1\32\1\114\1\115\1\32"+
    "\1\116\1\117\6\32\1\120\1\32\2\0\13\32\1\121"+
    "\1\122\1\76\1\123\1\124\1\125\1\126\1\127\1\130"+
    "\1\53\1\76\1\77\1\131\1\132\1\133\4\61\2\32"+
    "\1\134\1\135\1\136\3\0\1\75\1\137\1\140\1\141"+
    "\1\142\1\143\2\0\4\32\1\111\2\0\1\144\2\0"+
    "\1\145\11\32\1\146\7\32\1\147\1\150\1\32\1\151"+
    "\1\152\15\32\1\0\1\53\1\55\1\153\5\61\1\32"+
    "\1\154\1\155\4\0\1\156\2\32\4\0\6\32\1\157"+
    "\1\160\1\161\1\32\1\162\4\32\1\163\2\32\1\164"+
    "\10\32\1\165\1\166\3\32\1\53\1\155\1\61\1\167"+
    "\3\61\1\170\2\32\1\111\2\0\1\111\2\32\1\171"+
    "\1\172\1\32\1\173\1\174\4\32\1\175\2\32\1\176"+
    "\3\32\1\177\3\32\1\200\2\32\1\53\4\61\2\32"+
    "\4\0\1\201\1\202\2\32\1\203\2\32\1\204\1\205"+
    "\1\206\1\207\1\210\1\211\1\212\1\213\1\214\1\32"+
    "\1\53\1\61\2\32\3\0\5\32\1\53\1\61\1\215"+
    "\1\32\2\0\1\216\3\32\2\217\1\32\2\111\1\32"+
    "\1\220\1\221\1\222\2\0\1\223\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[421];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\116\0\234\0\352\0\u0138\0\u0186\0\u01d4\0\u0222"+
    "\0\u0270\0\u02be\0\u030c\0\u035a\0\u03a8\0\u02be\0\u03f6\0\u0444"+
    "\0\u0492\0\u04e0\0\u02be\0\u02be\0\u02be\0\u052e\0\u057c\0\u02be"+
    "\0\u05ca\0\u0618\0\u0666\0\u06b4\0\u0702\0\u0750\0\u02be\0\u079e"+
    "\0\u07ec\0\u083a\0\u0888\0\u08d6\0\u0924\0\u0972\0\u09c0\0\u0a0e"+
    "\0\u02be\0\u02be\0\u0a5c\0\u0aaa\0\u0af8\0\u0b46\0\u0b94\0\u0be2"+
    "\0\u0c30\0\u0c7e\0\u0ccc\0\u0d1a\0\u0d68\0\u0db6\0\u0e04\0\u0e52"+
    "\0\u0ea0\0\u0eee\0\u0f3c\0\u0f8a\0\u0fd8\0\u1026\0\u1074\0\u02be"+
    "\0\u10c2\0\u02be\0\u02be\0\u02be\0\u02be\0\u02be\0\u1110\0\u115e"+
    "\0\u11ac\0\u02be\0\u11fa\0\u1248\0\u1296\0\u02be\0\u12e4\0\u1332"+
    "\0\u02be\0\u02be\0\u1380\0\u13ce\0\u141c\0\u146a\0\u14b8\0\u1506"+
    "\0\u02be\0\u1554\0\u1554\0\u1554\0\u15a2\0\u15f0\0\u02be\0\u030c"+
    "\0\u163e\0\u02be\0\u02be\0\u168c\0\u16da\0\u1728\0\u02be\0\u1776"+
    "\0\u17c4\0\u1812\0\u1860\0\u18ae\0\u18fc\0\u194a\0\u02be\0\u02be"+
    "\0\u02be\0\u1998\0\u02be\0\u02be\0\u02be\0\u02be\0\u02be\0\u19e6"+
    "\0\u1a34\0\u1a82\0\u1ad0\0\u02be\0\u1b1e\0\u1b6c\0\u1bba\0\u1c08"+
    "\0\u1c56\0\u1ca4\0\u02be\0\u02be\0\u1cf2\0\u02be\0\u02be\0\u02be"+
    "\0\u1d40\0\u02be\0\u1d8e\0\u1ddc\0\u02be\0\u1e2a\0\u1e78\0\u1e78"+
    "\0\u1ec6\0\u1f14\0\u1f62\0\u1fb0\0\u1ffe\0\u204c\0\u209a\0\u20e8"+
    "\0\u2136\0\u2184\0\u0924\0\u21d2\0\u2220\0\u0924\0\u226e\0\u22bc"+
    "\0\u230a\0\u2358\0\u23a6\0\u23f4\0\u2442\0\u2490\0\u24de\0\u0924"+
    "\0\u252c\0\u257a\0\u25c8\0\u2616\0\u2664\0\u26b2\0\u2700\0\u274e"+
    "\0\u279c\0\u27ea\0\u2838\0\u2886\0\u28d4\0\u2922\0\u02be\0\u02be"+
    "\0\u2970\0\u29be\0\u2a0c\0\u02be\0\u02be\0\u02be\0\u02be\0\u2a5a"+
    "\0\u2aa8\0\u2af6\0\u2b44\0\u2b44\0\u2b92\0\u2be0\0\u2c2e\0\u2c7c"+
    "\0\u2cca\0\u2d18\0\u2d66\0\u0924\0\u02be\0\u02be\0\u2db4\0\u2e02"+
    "\0\u2e50\0\u2e9e\0\u2eec\0\u2f3a\0\u2f88\0\u02be\0\u02be\0\u2fd6"+
    "\0\u3024\0\u3072\0\u30c0\0\u310e\0\u315c\0\u02be\0\u31aa\0\u31f8"+
    "\0\u1e78\0\u3246\0\u3294\0\u0924\0\u32e2\0\u3330\0\u337e\0\u33cc"+
    "\0\u341a\0\u3468\0\u34b6\0\u3504\0\u3552\0\u0924\0\u35a0\0\u35ee"+
    "\0\u363c\0\u368a\0\u36d8\0\u3726\0\u3774\0\u0924\0\u0924\0\u37c2"+
    "\0\u0924\0\u02be\0\u3810\0\u385e\0\u38ac\0\u38fa\0\u3948\0\u3996"+
    "\0\u39e4\0\u3a32\0\u3a80\0\u3ace\0\u3b1c\0\u3b6a\0\u3bb8\0\u3c06"+
    "\0\u3c54\0\u3ca2\0\u02be\0\u3cf0\0\u3d3e\0\u3d8c\0\u3dda\0\u3e28"+
    "\0\u3e76\0\u0924\0\u02be\0\u2e9e\0\u2eec\0\u2f3a\0\u2f88\0\u02be"+
    "\0\u3ec4\0\u3f12\0\u3f60\0\u3fae\0\u3ffc\0\u404a\0\u4098\0\u40e6"+
    "\0\u4134\0\u4182\0\u41d0\0\u421e\0\u0924\0\u0924\0\u0924\0\u426c"+
    "\0\u0924\0\u42ba\0\u4308\0\u4356\0\u43a4\0\u0924\0\u43f2\0\u4440"+
    "\0\u0924\0\u448e\0\u44dc\0\u452a\0\u4578\0\u45c6\0\u4614\0\u4662"+
    "\0\u46b0\0\u0924\0\u46fe\0\u474c\0\u479a\0\u47e8\0\u4836\0\u1554"+
    "\0\u4884\0\u48d2\0\u4920\0\u496e\0\u49bc\0\u0924\0\u4a0a\0\u4a58"+
    "\0\u4aa6\0\u4af4\0\u4b42\0\u4b90\0\u4bde\0\u4c2c\0\u0924\0\u0924"+
    "\0\u4c7a\0\u0924\0\u0924\0\u4cc8\0\u4d16\0\u4d64\0\u4db2\0\u0924"+
    "\0\u4e00\0\u4e4e\0\u0924\0\u4e9c\0\u4eea\0\u4f38\0\u0924\0\u4f86"+
    "\0\u4fd4\0\u5022\0\u0924\0\u5070\0\u50be\0\u510c\0\u515a\0\u51a8"+
    "\0\u51f6\0\u5244\0\u5292\0\u52e0\0\u532e\0\u537c\0\u53ca\0\u5418"+
    "\0\u0924\0\u0924\0\u5466\0\u54b4\0\u0924\0\u5502\0\u5550\0\u0924"+
    "\0\u0924\0\u0924\0\u0924\0\u0924\0\u0924\0\u0924\0\u0924\0\u0924"+
    "\0\u559e\0\u55ec\0\u563a\0\u5688\0\u56d6\0\u5724\0\u5772\0\u57c0"+
    "\0\u580e\0\u585c\0\u58aa\0\u58f8\0\u5946\0\u5994\0\u59e2\0\u0924"+
    "\0\u5a30\0\u5a7e\0\u5acc\0\u0924\0\u5b1a\0\u5b68\0\u5bb6\0\u0924"+
    "\0\u146a\0\u5c04\0\u5c52\0\u5ca0\0\u5cee\0\u0924\0\u0924\0\u0924"+
    "\0\u5d3c\0\u5d8a\0\u0924\0\u5dd8\0\u5e26";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[421];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\1\13\1\14\1\12\1\13\1\12\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\3\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\2\45\1\46"+
    "\2\45\1\47\3\45\1\50\1\45\1\51\1\12\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\45\1\65\1\45\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\4\45"+
    "\1\100\1\101\1\102\1\103\1\12\1\104\1\105\1\106"+
    "\1\12\1\105\1\12\1\104\1\16\4\104\1\23\7\104"+
    "\1\107\36\104\1\110\32\104\7\111\1\112\1\111\1\113"+
    "\42\111\1\114\41\111\11\115\1\113\2\115\1\112\37\115"+
    "\1\114\41\115\17\116\1\117\4\116\1\120\71\116\1\12"+
    "\1\13\1\14\1\12\1\13\1\12\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\3\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\2\45\1\46\2\45"+
    "\1\47\3\45\1\50\1\45\1\51\1\12\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\45\1\65\1\45\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\4\45\1\121"+
    "\1\101\1\122\1\103\10\12\1\16\4\12\1\23\7\12"+
    "\1\123\13\12\13\124\4\12\1\124\1\12\2\124\1\125"+
    "\25\124\6\12\1\105\1\14\1\12\1\105\2\12\1\16"+
    "\4\12\1\23\7\12\1\123\13\12\13\126\4\12\1\126"+
    "\1\12\2\126\1\127\20\126\1\130\4\126\1\131\4\12"+
    "\2\132\1\14\2\132\1\12\1\132\1\133\4\132\1\134"+
    "\7\132\1\135\36\132\1\136\27\132\1\137\2\132\117\0"+
    "\1\140\2\0\1\140\17\0\1\141\73\0\1\14\136\0"+
    "\1\142\10\0\1\143\34\0\1\144\24\0\6\145\1\146"+
    "\44\145\1\147\10\145\1\150\1\145\1\151\2\145\1\152"+
    "\5\145\1\153\16\145\40\0\13\45\4\0\1\45\1\0"+
    "\4\45\1\154\1\155\2\45\1\156\17\45\41\0\1\157"+
    "\74\0\1\160\20\0\1\161\21\0\1\162\73\0\1\163"+
    "\101\0\1\164\13\0\1\165\103\0\1\166\11\0\1\167"+
    "\104\0\1\170\1\0\4\171\104\0\1\172\4\0\1\173"+
    "\7\0\1\174\104\0\1\175\1\0\4\35\12\0\1\176"+
    "\6\0\1\177\4\0\1\200\2\0\1\201\2\0\1\176"+
    "\10\0\1\202\7\0\1\177\32\0\1\175\1\0\4\35"+
    "\12\0\1\176\13\0\1\200\5\0\1\176\64\0\1\203"+
    "\103\0\1\204\10\0\1\205\1\206\115\0\1\207\115\0"+
    "\1\210\1\211\103\0\1\142\132\0\13\45\1\212\3\0"+
    "\1\45\1\0\30\45\32\0\4\45\7\0\13\45\4\0"+
    "\1\45\1\0\30\45\4\0\1\45\23\0\1\213\1\0"+
    "\4\45\7\0\13\45\4\0\1\45\1\0\30\45\4\0"+
    "\1\45\25\0\4\45\7\0\7\45\1\46\3\45\4\0"+
    "\1\45\1\0\30\45\4\0\1\45\25\0\4\45\7\0"+
    "\1\214\12\45\4\0\1\45\1\0\30\45\4\0\1\45"+
    "\34\0\1\215\106\0\4\45\7\0\13\45\4\0\1\216"+
    "\1\0\30\45\4\0\1\45\2\217\1\220\51\217\1\221"+
    "\3\217\1\220\35\217\25\0\4\45\7\0\13\45\4\0"+
    "\1\45\1\0\20\45\1\222\1\223\6\45\4\0\1\45"+
    "\25\0\4\45\7\0\13\45\4\0\1\45\1\0\17\45"+
    "\1\224\10\45\4\0\1\45\7\0\1\16\4\0\1\23"+
    "\10\0\4\45\7\0\13\45\4\0\1\45\1\0\15\45"+
    "\1\225\12\45\4\0\1\45\25\0\4\45\7\0\13\45"+
    "\4\0\1\45\1\0\4\45\1\226\15\45\1\227\5\45"+
    "\4\0\1\45\25\0\4\45\7\0\13\45\4\0\1\45"+
    "\1\0\12\45\1\230\1\45\1\231\13\45\4\0\1\45"+
    "\25\0\4\45\7\0\13\45\4\0\1\45\1\0\1\232"+
    "\13\45\1\233\1\234\12\45\4\0\1\45\25\0\4\45"+
    "\7\0\13\45\4\0\1\45\1\0\15\45\1\235\12\45"+
    "\4\0\1\45\25\0\4\45\7\0\13\45\4\0\1\45"+
    "\1\0\5\45\1\236\5\45\1\237\1\240\3\45\1\241"+
    "\7\45\4\0\1\45\25\0\4\45\7\0\13\45\4\0"+
    "\1\45\1\0\15\45\1\242\12\45\4\0\1\45\25\0"+
    "\4\45\7\0\13\45\4\0\1\45\1\0\1\243\14\45"+
    "\1\244\4\45\1\245\5\45\4\0\1\45\25\0\4\45"+
    "\7\0\13\45\4\0\1\45\1\0\10\45\1\246\4\45"+
    "\1\247\12\45\4\0\1\45\25\0\4\45\7\0\13\45"+
    "\4\0\1\45\1\0\17\45\1\250\10\45\4\0\1\45"+
    "\25\0\4\45\7\0\13\45\4\0\1\45\1\0\22\45"+
    "\1\251\5\45\4\0\1\45\7\0\1\252\4\0\1\253"+
    "\10\0\4\45\7\0\13\45\4\0\1\45\1\0\4\45"+
    "\1\254\5\45\1\255\15\45\4\0\1\45\25\0\4\45"+
    "\7\0\13\45\4\0\1\45\1\0\4\45\1\256\2\45"+
    "\1\257\1\260\5\45\1\261\2\45\1\262\6\45\4\0"+
    "\1\45\25\0\4\45\7\0\13\45\4\0\1\45\1\0"+
    "\17\45\1\263\6\45\1\264\1\45\4\0\1\45\25\0"+
    "\4\45\7\0\13\45\4\0\1\45\1\0\14\45\1\265"+
    "\13\45\4\0\1\45\25\0\4\45\7\0\13\45\4\0"+
    "\1\45\1\0\15\45\1\266\12\45\4\0\1\45\34\0"+
    "\1\267\55\0\1\270\22\0\1\271\4\0\1\272\100\0"+
    "\1\16\4\0\1\23\101\0\7\111\1\0\1\111\1\0"+
    "\42\111\1\0\41\111\40\0\13\273\4\0\1\273\1\0"+
    "\30\273\1\274\4\0\2\275\4\0\110\275\11\115\1\0"+
    "\2\115\1\0\37\115\1\0\41\115\24\0\1\276\110\0"+
    "\1\277\115\0\1\271\123\0\4\124\7\0\13\124\4\0"+
    "\1\124\1\0\30\124\4\0\1\124\7\0\1\16\4\0"+
    "\1\23\10\0\4\124\7\0\13\124\4\0\1\124\1\0"+
    "\30\124\4\0\1\124\25\0\4\126\7\0\13\126\4\0"+
    "\1\126\1\0\30\126\4\0\1\126\7\0\1\16\4\0"+
    "\1\23\10\0\4\126\7\0\13\126\4\0\1\126\1\0"+
    "\30\126\4\0\1\126\25\0\4\126\7\0\13\126\4\0"+
    "\1\126\1\0\15\126\1\300\12\126\4\0\1\126\2\132"+
    "\1\0\2\132\1\0\105\132\1\0\4\132\1\0\2\132"+
    "\1\0\11\132\1\301\73\132\1\0\4\132\1\0\2\132"+
    "\1\0\1\132\1\133\4\132\1\134\76\132\1\0\2\132"+
    "\24\0\1\302\166\0\1\303\3\0\1\304\14\0\2\145"+
    "\1\0\2\145\1\0\110\145\53\305\1\145\42\305\2\145"+
    "\1\0\2\145\1\0\57\145\1\306\32\145\1\0\2\145"+
    "\1\0\65\145\1\307\24\145\1\0\2\145\1\0\67\145"+
    "\1\310\22\145\1\0\2\145\1\0\64\145\1\311\23\145"+
    "\25\0\4\45\7\0\13\45\4\0\1\45\1\0\12\45"+
    "\1\312\15\45\4\0\1\45\25\0\4\45\7\0\13\45"+
    "\4\0\1\45\1\0\15\45\1\313\12\45\4\0\1\45"+
    "\25\0\4\45\7\0\13\45\4\0\1\45\1\0\5\45"+
    "\1\314\22\45\4\0\1\45\34\0\1\315\104\0\1\316"+
    "\117\0\4\171\12\0\1\176\13\0\1\317\5\0\1\176"+
    "\47\0\1\320\76\0\2\173\1\140\2\272\1\0\110\173"+
    "\25\0\4\171\105\0\1\321\1\0\1\321\2\0\4\322"+
    "\112\0\4\323\7\0\4\323\15\0\6\323\54\0\4\35"+
    "\26\0\1\200\63\0\2\324\114\0\3\325\122\0\1\326"+
    "\115\0\1\327\1\330\117\0\1\331\13\332\4\0\1\332"+
    "\1\0\30\332\32\0\4\45\7\0\7\45\1\333\3\45"+
    "\4\0\1\45\1\0\30\45\4\0\1\45\25\0\4\45"+
    "\7\0\13\45\4\0\1\45\1\0\6\45\1\334\6\45"+
    "\1\335\12\45\4\0\1\45\60\0\1\336\35\0\2\217"+
    "\4\0\17\217\3\337\20\217\1\340\7\217\1\341\22\217"+
    "\1\342\2\217\1\343\7\217\25\0\4\45\7\0\13\45"+
    "\4\0\1\45\1\0\13\45\1\344\4\45\1\345\7\45"+
    "\4\0\1\45\25\0\4\45\7\0\13\45\4\0\1\45"+
    "\1\0\15\45\1\346\12\45\4\0\1\45\25\0\4\45"+
    "\7\0\13\45\4\0\1\45\1\0\4\45\1\347\23\45"+
    "\4\0\1\45\25\0\4\45\7\0\13\45\4\0\1\45"+
    "\1\0\14\45\1\350\13\45\4\0\1\45\25\0\4\45"+
    "\7\0\13\45\4\0\1\45\1\0\5\45\1\351\22\45"+
    "\4\0\1\45\25\0\4\45\7\0\13\45\4\0\1\45"+
    "\1\0\13\45\1\352\14\45\4\0\1\45\25\0\4\45"+
    "\7\0\13\45\4\0\1\45\1\0\20\45\1\353\7\45"+
    "\4\0\1\45\25\0\4\45\7\0\13\45\4\0\1\45"+
    "\1\0\22\45\1\354\5\45\4\0\1\45\25\0\4\45"+
    "\7\0\13\45\4\0\1\45\1\0\12\45\1\355\15\45"+
    "\4\0\1\45\25\0\4\45\7\0\13\45\4\0\1\45"+
    "\1\0\17\45\1\356\10\45\4\0\1\45\25\0\4\45"+
    "\7\0\13\45\4\0\1\45\1\0\21\45\1\357\6\45"+
    "\4\0\1\45\25\0\4\45\7\0\13\45\4\0\1\45"+
    "\1\0\16\45\1\360\11\45\4\0\1\45\25\0\4\45"+
    "\7\0\13\45\4\0\1\45\1\0\21\45\1\361\6\45"+
    "\4\0\1\45\25\0\4\45\7\0\13\45\4\0\1\45"+
    "\1\0\17\45\1\362\10\45\4\0\1\45\25\0\4\45"+
    "\7\0\13\45\4\0\1\45\1\0\2\45\1\363\25\45"+
    "\4\0\1\45\25\0\4\45\7\0\13\45\4\0\1\45"+
    "\1\0\21\45\1\364\6\45\4\0\1\45\25\0\4\45"+
    "\7\0\13\45\4\0\1\45\1\0\3\45\1\365\24\45"+
    "\4\0\1\45\25\0\4\45\7\0\13\45\4\0\1\45"+
    "\1\0\21\45\1\366\6\45\4\0\1\45\25\0\4\45"+
    "\7\0\13\45\4\0\1\45\1\0\12\45\1\367\15\45"+
    "\4\0\1\45\25\0\4\45\7\0\13\45\4\0\1\45"+
    "\1\0\14\45\1\370\13\45\4\0\1\45\25\0\4\45"+
    "\7\0\13\45\4\0\1\45\1\0\1\45\1\371\26\45"+
    "\4\0\1\45\7\252\1\372\106\252\14\253\1\372\101\253"+
    "\25\0\4\45\7\0\13\45\4\0\1\45\1\0\21\45"+
    "\1\373\6\45\4\0\1\45\25\0\4\45\7\0\13\45"+
    "\4\0\1\45\1\0\15\45\1\374\12\45\4\0\1\45"+
    "\25\0\4\45\7\0\13\45\4\0\1\45\1\0\12\45"+
    "\1\375\15\45\4\0\1\45\25\0\4\45\7\0\13\45"+
    "\4\0\1\45\1\0\1\376\27\45\4\0\1\45\25\0"+
    "\4\45\7\0\13\45\4\0\1\45\1\0\27\45\1\377"+
    "\4\0\1\45\25\0\4\45\7\0\13\45\4\0\1\45"+
    "\1\0\1\u0100\27\45\4\0\1\45\25\0\4\45\7\0"+
    "\13\45\4\0\1\45\1\0\1\u0101\16\45\1\u0102\10\45"+
    "\4\0\1\45\25\0\4\45\7\0\13\45\4\0\1\45"+
    "\1\0\22\45\1\u0103\5\45\4\0\1\45\25\0\4\45"+
    "\7\0\13\45\4\0\1\45\1\0\16\45\1\u0104\11\45"+
    "\4\0\1\45\25\0\4\45\7\0\13\45\4\0\1\45"+
    "\1\0\10\45\1\u0105\7\45\1\u0106\7\45\4\0\1\45"+
    "\25\0\4\45\7\0\13\45\4\0\1\45\1\0\12\45"+
    "\1\u0107\15\45\4\0\1\45\17\0\1\u0108\76\0\2\272"+
    "\1\0\2\272\1\0\110\272\25\0\4\273\7\0\13\273"+
    "\4\0\1\273\1\0\30\273\4\0\1\273\25\0\4\126"+
    "\7\0\13\126\4\0\1\126\1\0\12\126\1\u0109\15\126"+
    "\4\0\1\126\2\132\1\0\2\132\1\0\11\132\1\u010a"+
    "\73\132\1\0\2\132\2\302\1\140\3\0\110\302\25\0"+
    "\4\u010b\7\0\13\u010b\4\0\1\u010b\1\0\30\u010b\4\0"+
    "\1\u010b\2\305\1\0\2\305\1\0\110\305\2\145\1\0"+
    "\2\145\1\0\60\145\1\u010c\31\145\1\0\2\145\1\0"+
    "\53\145\1\u010d\36\145\1\0\2\145\1\0\55\145\1\u010e"+
    "\15\145\1\u010f\16\145\1\0\2\145\1\0\61\145\1\u0110"+
    "\26\145\25\0\4\45\7\0\13\45\4\0\1\45\1\0"+
    "\20\45\1\u0111\7\45\4\0\1\45\25\0\4\45\7\0"+
    "\13\45\4\0\1\45\1\0\17\45\1\u0112\10\45\4\0"+
    "\1\45\25\0\4\171\26\0\1\317\55\0\1\320\4\0"+
    "\1\u0113\116\0\4\322\112\0\4\322\26\0\1\u0114\63\0"+
    "\4\323\7\0\4\323\13\0\1\u0115\1\0\6\323\54\0"+
    "\2\324\30\0\1\u0116\63\0\3\325\27\0\1\u0117\72\0"+
    "\1\u0118\121\0\13\332\4\0\1\332\1\0\30\332\30\0"+
    "\1\332\1\0\4\332\7\0\13\332\4\0\1\332\1\0"+
    "\30\332\4\0\1\332\25\0\4\45\7\0\6\45\1\46"+
    "\4\45\4\0\1\45\1\0\30\45\4\0\1\45\25\0"+
    "\4\45\7\0\13\45\4\0\1\45\1\0\12\45\1\u0119"+
    "\15\45\4\0\1\45\25\0\4\45\7\0\13\45\4\0"+
    "\1\45\1\0\5\45\1\u011a\22\45\4\0\1\45\25\0"+
    "\3\u011b\30\0\1\336\62\0\4\u011c\7\0\4\u011c\14\0"+
    "\1\336\6\u011c\54\0\4\u011d\7\0\4\u011d\14\0\1\336"+
    "\6\u011d\54\0\4\u011e\7\0\4\u011e\14\0\1\336\6\u011e"+
    "\54\0\4\45\7\0\13\45\4\0\1\45\1\0\4\45"+
    "\1\u011f\23\45\4\0\1\45\25\0\4\45\7\0\13\45"+
    "\4\0\1\45\1\0\13\45\1\u0120\14\45\4\0\1\45"+
    "\25\0\4\45\7\0\13\45\4\0\1\45\1\0\1\u0121"+
    "\27\45\4\0\1\45\25\0\4\45\7\0\13\45\4\0"+
    "\1\45\1\0\20\45\1\u0122\1\u0123\6\45\4\0\1\45"+
    "\25\0\4\45\7\0\13\45\4\0\1\45\1\0\4\45"+
    "\1\u0124\23\45\4\0\1\45\25\0\4\45\7\0\13\45"+
    "\4\0\1\45\1\0\16\45\1\u0125\11\45\4\0\1\45"+
    "\25\0\4\45\7\0\13\45\4\0\1\45\1\0\4\45"+
    "\1\u0126\23\45\4\0\1\45\25\0\4\45\7\0\13\45"+
    "\4\0\1\45\1\0\13\45\1\u0127\14\45\4\0\1\45"+
    "\25\0\4\45\7\0\13\45\4\0\1\45\1\0\20\45"+
    "\1\u0128\7\45\4\0\1\45\25\0\4\45\7\0\13\45"+
    "\4\0\1\45\1\0\15\45\1\u0129\12\45\4\0\1\45"+
    "\25\0\4\45\7\0\13\45\4\0\1\45\1\0\12\45"+
    "\1\u012a\2\45\1\u012b\12\45\4\0\1\45\25\0\4\45"+
    "\7\0\13\45\4\0\1\45\1\0\4\45\1\u012c\23\45"+
    "\4\0\1\45\25\0\4\45\7\0\13\45\4\0\1\45"+
    "\1\0\4\45\1\u012d\23\45\4\0\1\45\25\0\4\45"+
    "\7\0\13\45\4\0\1\45\1\0\11\45\1\u012e\16\45"+
    "\4\0\1\45\25\0\4\45\7\0\13\45\4\0\1\45"+
    "\1\0\2\45\1\u012f\25\45\4\0\1\45\25\0\4\45"+
    "\7\0\13\45\4\0\1\45\1\0\22\45\1\u0130\5\45"+
    "\4\0\1\45\25\0\4\45\7\0\13\45\4\0\1\45"+
    "\1\0\4\45\1\u0131\23\45\4\0\1\45\25\0\4\45"+
    "\7\0\13\45\4\0\1\45\1\0\22\45\1\u0132\5\45"+
    "\4\0\1\45\25\0\4\45\7\0\13\45\4\0\1\45"+
    "\1\0\2\45\1\u0133\25\45\4\0\1\45\25\0\4\45"+
    "\7\0\13\45\4\0\1\45\1\0\4\45\1\u0134\23\45"+
    "\4\0\1\45\25\0\4\45\7\0\13\45\4\0\1\45"+
    "\1\0\17\45\1\u0135\10\45\4\0\1\45\25\0\4\45"+
    "\7\0\13\45\4\0\1\45\1\0\4\45\1\u0136\23\45"+
    "\4\0\1\45\25\0\4\45\7\0\13\45\4\0\1\45"+
    "\1\0\24\45\1\u0137\3\45\4\0\1\45\25\0\4\45"+
    "\7\0\13\45\4\0\1\45\1\0\21\45\1\u0138\6\45"+
    "\4\0\1\45\25\0\4\45\7\0\13\45\4\0\1\45"+
    "\1\0\22\45\1\u0139\5\45\4\0\1\45\25\0\4\45"+
    "\7\0\13\45\4\0\1\45\1\0\4\45\1\u013a\23\45"+
    "\4\0\1\45\25\0\4\45\7\0\13\45\4\0\1\45"+
    "\1\0\4\45\1\u013b\23\45\4\0\1\45\25\0\4\45"+
    "\7\0\13\45\4\0\1\45\1\0\15\45\1\u013c\12\45"+
    "\4\0\1\45\25\0\4\45\7\0\13\45\4\0\1\45"+
    "\1\0\1\u013d\27\45\4\0\1\45\25\0\4\45\7\0"+
    "\13\45\4\0\1\45\1\0\1\u013e\27\45\4\0\1\45"+
    "\24\0\1\u0113\116\0\4\126\7\0\13\126\4\0\1\126"+
    "\1\0\1\u013f\27\126\4\0\1\126\2\132\1\0\2\132"+
    "\1\0\16\132\1\u0140\66\132\1\0\2\132\2\145\1\0"+
    "\2\145\1\0\63\145\1\u0141\26\145\1\0\2\145\1\0"+
    "\61\145\1\u0142\30\145\1\0\2\145\1\0\65\145\1\u0143"+
    "\24\145\1\0\2\145\1\0\57\145\1\u0144\32\145\1\0"+
    "\2\145\1\0\55\145\1\u0145\32\145\25\0\4\45\7\0"+
    "\13\45\4\0\1\45\1\0\4\45\1\u0146\23\45\4\0"+
    "\1\45\25\0\4\45\7\0\13\45\4\0\1\45\1\0"+
    "\15\45\1\u0147\12\45\4\0\1\45\25\0\4\45\7\0"+
    "\13\45\4\0\1\45\1\0\5\45\1\u0148\22\45\4\0"+
    "\1\45\25\0\3\u0149\113\0\4\u014a\7\0\4\u014a\15\0"+
    "\6\u014a\54\0\4\u014b\7\0\4\u014b\15\0\6\u014b\54\0"+
    "\4\u014c\7\0\4\u014c\15\0\6\u014c\54\0\4\45\7\0"+
    "\13\45\4\0\1\45\1\0\17\45\1\u014d\10\45\4\0"+
    "\1\45\25\0\4\45\7\0\13\45\4\0\1\45\1\0"+
    "\10\45\1\u014e\17\45\4\0\1\45\25\0\4\45\7\0"+
    "\13\45\4\0\1\45\1\0\11\45\1\u014f\16\45\4\0"+
    "\1\45\25\0\4\45\7\0\13\45\4\0\1\45\1\0"+
    "\21\45\1\u0150\6\45\4\0\1\45\25\0\4\45\7\0"+
    "\13\45\4\0\1\45\1\0\10\45\1\u0151\17\45\4\0"+
    "\1\45\25\0\4\45\7\0\13\45\4\0\1\45\1\0"+
    "\17\45\1\u0152\10\45\4\0\1\45\25\0\4\45\7\0"+
    "\13\45\4\0\1\45\1\0\4\45\1\u0153\23\45\4\0"+
    "\1\45\25\0\4\45\7\0\13\45\4\0\1\45\1\0"+
    "\4\45\1\u0154\23\45\4\0\1\45\25\0\4\45\7\0"+
    "\13\45\4\0\1\45\1\0\17\45\1\u0155\10\45\4\0"+
    "\1\45\25\0\4\45\7\0\13\45\4\0\1\45\1\0"+
    "\17\45\1\u0156\10\45\4\0\1\45\25\0\4\45\7\0"+
    "\13\45\4\0\1\45\1\0\5\45\1\u0157\22\45\4\0"+
    "\1\45\25\0\4\45\7\0\13\45\4\0\1\45\1\0"+
    "\7\45\1\u0158\20\45\4\0\1\45\25\0\4\45\7\0"+
    "\13\45\4\0\1\45\1\0\12\45\1\u0159\15\45\4\0"+
    "\1\45\25\0\4\45\7\0\13\45\4\0\1\45\1\0"+
    "\17\45\1\u015a\10\45\4\0\1\45\25\0\4\45\7\0"+
    "\13\45\4\0\1\45\1\0\11\45\1\u015b\16\45\4\0"+
    "\1\45\25\0\4\45\7\0\13\45\4\0\1\45\1\0"+
    "\2\45\1\u015c\25\45\4\0\1\45\25\0\4\45\7\0"+
    "\13\45\4\0\1\45\1\0\4\45\1\u015d\23\45\4\0"+
    "\1\45\25\0\4\45\7\0\13\45\4\0\1\45\1\0"+
    "\15\45\1\u015e\12\45\4\0\1\45\25\0\4\45\7\0"+
    "\13\45\4\0\1\45\1\0\14\45\1\u015f\13\45\4\0"+
    "\1\45\25\0\4\45\7\0\13\45\4\0\1\45\1\0"+
    "\10\45\1\u0160\17\45\4\0\1\45\25\0\4\45\7\0"+
    "\13\45\4\0\1\45\1\0\2\45\1\u0161\25\45\4\0"+
    "\1\45\25\0\4\45\7\0\13\45\4\0\1\45\1\0"+
    "\15\45\1\u0162\12\45\4\0\1\45\25\0\4\45\7\0"+
    "\13\45\4\0\1\45\1\0\14\45\1\u0163\13\45\4\0"+
    "\1\45\25\0\4\45\7\0\13\45\4\0\1\45\1\0"+
    "\5\45\1\u0164\22\45\4\0\1\45\25\0\4\45\7\0"+
    "\13\45\4\0\1\45\1\0\21\45\1\u0165\6\45\4\0"+
    "\1\45\25\0\4\126\7\0\13\126\4\0\1\126\1\0"+
    "\21\126\1\u0166\6\126\4\0\1\126\2\145\1\0\2\145"+
    "\1\0\67\145\1\u0167\20\145\2\u0142\1\0\2\u0142\1\0"+
    "\110\u0142\2\145\1\0\2\145\1\0\75\145\1\u0168\14\145"+
    "\1\0\2\145\1\0\72\145\1\u0169\17\145\1\0\2\145"+
    "\1\0\70\145\1\u016a\17\145\25\0\4\45\7\0\13\45"+
    "\4\0\1\45\1\0\1\45\1\u016b\26\45\4\0\1\45"+
    "\25\0\4\45\7\0\13\45\4\0\1\45\1\0\20\45"+
    "\1\u016c\7\45\4\0\1\45\54\0\1\u016d\3\0\1\336"+
    "\62\0\4\u016e\7\0\4\u016e\15\0\6\u016e\54\0\4\u016f"+
    "\7\0\4\u016f\15\0\6\u016f\103\0\1\u0170\3\0\1\336"+
    "\62\0\4\45\7\0\13\45\4\0\1\45\1\0\21\45"+
    "\1\u0171\6\45\4\0\1\45\25\0\4\45\7\0\13\45"+
    "\4\0\1\45\1\0\2\45\1\u0172\25\45\4\0\1\45"+
    "\25\0\4\45\7\0\13\45\4\0\1\45\1\0\14\45"+
    "\1\u0173\13\45\4\0\1\45\25\0\4\45\7\0\13\45"+
    "\4\0\1\45\1\0\13\45\1\u0174\14\45\4\0\1\45"+
    "\25\0\4\45\7\0\13\45\4\0\1\45\1\0\21\45"+
    "\1\u0175\6\45\4\0\1\45\25\0\4\45\7\0\13\45"+
    "\4\0\1\45\1\0\5\45\1\u0176\22\45\4\0\1\45"+
    "\25\0\4\45\7\0\13\45\4\0\1\45\1\0\21\45"+
    "\1\u0177\6\45\4\0\1\45\25\0\4\45\7\0\13\45"+
    "\4\0\1\45\1\0\4\45\1\u0178\23\45\4\0\1\45"+
    "\25\0\4\45\7\0\13\45\4\0\1\45\1\0\14\45"+
    "\1\u0179\13\45\4\0\1\45\25\0\4\45\7\0\13\45"+
    "\4\0\1\45\1\0\21\45\1\u017a\6\45\4\0\1\45"+
    "\25\0\4\45\7\0\13\45\4\0\1\45\1\0\3\45"+
    "\1\u017b\24\45\4\0\1\45\25\0\4\45\7\0\13\45"+
    "\4\0\1\45\1\0\5\45\1\u017c\22\45\4\0\1\45"+
    "\25\0\4\45\7\0\13\45\4\0\1\45\1\0\2\45"+
    "\1\u017d\25\45\4\0\1\45\25\0\4\45\7\0\13\45"+
    "\4\0\1\45\1\0\21\45\1\u017e\6\45\4\0\1\45"+
    "\25\0\4\45\7\0\13\45\4\0\1\45\1\0\5\45"+
    "\1\u017f\22\45\4\0\1\45\25\0\4\45\7\0\13\45"+
    "\4\0\1\45\1\0\4\45\1\u0180\23\45\4\0\1\45"+
    "\25\0\4\45\7\0\13\45\4\0\1\45\1\0\10\45"+
    "\1\u0181\17\45\4\0\1\45\25\0\4\126\7\0\13\126"+
    "\4\0\1\126\1\0\10\126\1\u0182\17\126\4\0\1\126"+
    "\2\145\1\0\2\145\1\0\57\145\1\u0142\32\145\1\0"+
    "\2\145\1\0\56\145\1\u0167\33\145\1\0\2\145\1\0"+
    "\74\145\1\u0142\15\145\1\0\2\145\1\0\67\145\1\u0183"+
    "\20\145\25\0\4\45\7\0\13\45\4\0\1\45\1\0"+
    "\1\u0184\27\45\4\0\1\45\25\0\4\45\7\0\13\45"+
    "\4\0\1\45\1\0\4\45\1\u0185\23\45\4\0\1\45"+
    "\25\0\3\u0186\113\0\4\u0187\7\0\4\u0187\15\0\6\u0187"+
    "\54\0\4\220\7\0\4\220\15\0\6\220\135\0\1\u0188"+
    "\34\0\4\45\7\0\13\45\4\0\1\45\1\0\22\45"+
    "\1\u0189\5\45\4\0\1\45\25\0\4\45\7\0\13\45"+
    "\4\0\1\45\1\0\4\45\1\u018a\23\45\4\0\1\45"+
    "\25\0\4\45\7\0\13\45\4\0\1\45\1\0\1\u018b"+
    "\27\45\4\0\1\45\25\0\4\45\7\0\13\45\4\0"+
    "\1\45\1\0\26\45\1\u018c\1\45\4\0\1\45\25\0"+
    "\4\45\7\0\13\45\4\0\1\45\1\0\12\45\1\u018d"+
    "\15\45\4\0\1\45\25\0\4\126\7\0\13\126\4\0"+
    "\1\126\1\0\12\126\1\u018e\15\126\4\0\1\126\2\145"+
    "\1\0\2\145\1\0\60\145\1\u018f\27\145\25\0\4\45"+
    "\7\0\13\45\4\0\1\45\1\0\12\45\1\u0190\15\45"+
    "\4\0\1\45\25\0\4\45\7\0\13\45\4\0\1\45"+
    "\1\0\21\45\1\u0191\6\45\4\0\1\45\25\0\3\u0192"+
    "\113\0\4\u011d\7\0\4\u011d\15\0\6\u011d\54\0\4\u0193"+
    "\7\0\4\u0193\15\0\6\u0193\54\0\4\45\7\0\13\45"+
    "\4\0\1\45\1\0\4\45\1\u0194\23\45\4\0\1\45"+
    "\25\0\4\45\7\0\13\45\4\0\1\45\1\0\14\45"+
    "\1\u0195\13\45\4\0\1\45\25\0\4\45\7\0\13\45"+
    "\4\0\1\45\1\0\2\45\1\u0196\25\45\4\0\1\45"+
    "\25\0\4\45\7\0\13\45\4\0\1\45\1\0\16\45"+
    "\1\u0197\11\45\4\0\1\45\25\0\4\45\7\0\13\45"+
    "\4\0\1\45\1\0\4\45\1\u0198\23\45\4\0\1\45"+
    "\25\0\4\126\7\0\13\126\4\0\1\126\1\0\4\126"+
    "\1\u0199\23\126\4\0\1\126\2\145\1\0\2\145\1\0"+
    "\63\145\1\u010d\24\145\25\0\4\45\7\0\13\45\4\0"+
    "\1\45\1\0\15\45\1\u019a\12\45\4\0\1\45\25\0"+
    "\3\u019b\113\0\4\u019c\7\0\4\u019c\15\0\6\u019c\54\0"+
    "\4\45\7\0\13\45\4\0\1\45\1\0\21\45\1\u019d"+
    "\6\45\4\0\1\45\25\0\4\45\7\0\13\45\4\0"+
    "\1\45\1\0\4\45\1\u019e\23\45\4\0\1\45\25\0"+
    "\4\45\7\0\13\45\4\0\1\45\1\0\4\45\1\u019f"+
    "\23\45\4\0\1\45\25\0\4\45\7\0\13\45\4\0"+
    "\1\45\1\0\5\45\1\u01a0\22\45\4\0\1\45\54\0"+
    "\1\u01a1\3\0\1\336\111\0\1\u01a2\3\0\1\336\62\0"+
    "\4\45\7\0\13\45\4\0\1\45\1\0\20\45\1\u01a3"+
    "\7\45\4\0\1\45\25\0\3\u01a4\174\0\1\u014b\34\0"+
    "\3\u01a5\113\0\3\220\66\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[24180];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\11\3\1\1\11\4\1\3\11\2\1\1\11"+
    "\6\1\1\11\11\1\2\11\25\1\1\11\1\1\5\11"+
    "\3\1\1\11\3\1\1\11\2\1\2\11\6\1\1\11"+
    "\5\1\1\11\2\0\2\11\1\0\2\1\1\11\7\1"+
    "\3\11\1\1\5\11\4\1\1\11\6\0\2\11\1\1"+
    "\3\11\1\0\1\11\1\0\1\1\1\11\1\1\1\0"+
    "\1\1\1\0\30\1\2\0\13\1\2\11\3\1\4\11"+
    "\15\1\2\11\3\0\4\1\2\11\2\0\4\1\1\11"+
    "\2\0\1\1\2\0\26\1\1\11\15\1\1\0\2\1"+
    "\1\11\7\1\1\11\4\0\1\11\2\1\4\0\53\1"+
    "\2\0\41\1\4\0\25\1\3\0\11\1\2\0\15\1"+
    "\2\0\1\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[421];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  private static final class State {
    final int lBraceCount;
    final int state;

    public State(int state, int lBraceCount) {
        this.state = state;
        this.lBraceCount = lBraceCount;
    }

    @Override
    public String toString() {
        return "yystate = " + state + (lBraceCount == 0 ? "" : "lBraceCount = " + lBraceCount);
    }
  }

  private final Stack<State> states = new Stack<State>();
  private int lBraceCount;

  private int commentStart;
  private int commentDepth;

  private void pushState(int state) {
    states.push(new State(yystate(), lBraceCount));
    lBraceCount = 0;
    yybegin(state);
  }

  private void popState() {
    State state = states.pop();
    lBraceCount = state.lBraceCount;
    yybegin(state.state);
  }

  private void popMaybeSemicolonState() {
     // if there is nested state with semicolon
     if (states.peek().state == MAYBE_SEMICOLON) {
       states.pop();
     }
     popState();
  }

  public _VlangLexer() {
    this((java.io.Reader)null);
 }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _VlangLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case MULTI_LINE_COMMENT_STATE: {
              int state = yystate();
        popState();
        zzStartRead = commentStart;
        return MULTI_LINE_COMMENT;
            }  // fall though
            case 422: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 148: break;
          case 2:
            { return WS;
            }
          // fall through
          case 149: break;
          case 3:
            { return NLS;
            }
          // fall through
          case 150: break;
          case 4:
            { pushState(MAYBE_SEMICOLON); return NOT;
            }
          // fall through
          case 151: break;
          case 5:
            { pushState(STRING); return OPEN_QUOTE;
            }
          // fall through
          case 152: break;
          case 6:
            { return DOLLAR;
            }
          // fall through
          case 153: break;
          case 7:
            { return REMAINDER;
            }
          // fall through
          case 154: break;
          case 8:
            { return BIT_AND;
            }
          // fall through
          case 155: break;
          case 9:
            { pushState(SINGLE_STRING); return OPEN_QUOTE;
            }
          // fall through
          case 156: break;
          case 10:
            { return LPAREN;
            }
          // fall through
          case 157: break;
          case 11:
            { pushState(MAYBE_SEMICOLON); return RPAREN;
            }
          // fall through
          case 158: break;
          case 12:
            { return MUL;
            }
          // fall through
          case 159: break;
          case 13:
            { return PLUS;
            }
          // fall through
          case 160: break;
          case 14:
            { return COMMA;
            }
          // fall through
          case 161: break;
          case 15:
            { return MINUS;
            }
          // fall through
          case 162: break;
          case 16:
            { return DOT;
            }
          // fall through
          case 163: break;
          case 17:
            { return QUOTIENT;
            }
          // fall through
          case 164: break;
          case 18:
            { pushState(MAYBE_SEMICOLON); return INT;
            }
          // fall through
          case 165: break;
          case 19:
            { pushState(MAYBE_SEMICOLON); return COLON;
            }
          // fall through
          case 166: break;
          case 20:
            { return SEMICOLON;
            }
          // fall through
          case 167: break;
          case 21:
            { return LESS;
            }
          // fall through
          case 168: break;
          case 22:
            { return ASSIGN;
            }
          // fall through
          case 169: break;
          case 23:
            { pushState(MAYBE_SEMICOLON); return GREATER;
            }
          // fall through
          case 170: break;
          case 24:
            { pushState(MAYBE_SEMICOLON); return QUESTION;
            }
          // fall through
          case 171: break;
          case 25:
            { return AT;
            }
          // fall through
          case 172: break;
          case 26:
            { pushState(MAYBE_SEMICOLON); return IDENTIFIER;
            }
          // fall through
          case 173: break;
          case 27:
            { return LBRACK;
            }
          // fall through
          case 174: break;
          case 28:
            { pushState(MAYBE_SEMICOLON); return RBRACK;
            }
          // fall through
          case 175: break;
          case 29:
            { return BIT_XOR;
            }
          // fall through
          case 176: break;
          case 30:
            { return BACKTICK;
            }
          // fall through
          case 177: break;
          case 31:
            { return LBRACE;
            }
          // fall through
          case 178: break;
          case 32:
            { return BIT_OR;
            }
          // fall through
          case 179: break;
          case 33:
            { pushState(MAYBE_SEMICOLON); return RBRACE;
            }
          // fall through
          case 180: break;
          case 34:
            { return TILDA;
            }
          // fall through
          case 181: break;
          case 35:
            { popMaybeSemicolonState(); yypushback(yytext().length());
            }
          // fall through
          case 182: break;
          case 36:
            { popMaybeSemicolonState();
                                            yypushback(yytext().length());
                                            return SEMICOLON_SYNTHETIC;
            }
          // fall through
          case 183: break;
          case 37:
            { return LITERAL_STRING_TEMPLATE_ENTRY;
            }
          // fall through
          case 184: break;
          case 38:
            { popState(); pushState(MAYBE_SEMICOLON); return CLOSING_QUOTE;
            }
          // fall through
          case 185: break;
          case 39:
            { 
            }
          // fall through
          case 186: break;
          case 40:
            { lBraceCount++; return LBRACE;
            }
          // fall through
          case 187: break;
          case 41:
            { if (lBraceCount == 0) {
                                                      popState();
                                                      return TEMPLATE_ENTRY_END;
                                                    }
                                                    lBraceCount--;
                                                    pushState(MAYBE_SEMICOLON);
                                                    return RBRACE;
            }
          // fall through
          case 188: break;
          case 42:
            { popState(); return IDENTIFIER;
            }
          // fall through
          case 189: break;
          case 43:
            { return IDENTIFIER;
            }
          // fall through
          case 190: break;
          case 44:
            { yybegin(ASM_BLOCK_LINE); return LBRACE;
            }
          // fall through
          case 191: break;
          case 45:
            { return ASM_LINE;
            }
          // fall through
          case 192: break;
          case 46:
            { yybegin(MAYBE_SEMICOLON); return RBRACE;
            }
          // fall through
          case 193: break;
          case 47:
            { return SAFE_DOT;
            }
          // fall through
          case 194: break;
          case 48:
            { return NOT_EQ;
            }
          // fall through
          case 195: break;
          case 49:
            { return HASH_COMMENT;
            }
          // fall through
          case 196: break;
          case 50:
            { return HASH_LBRACK;
            }
          // fall through
          case 197: break;
          case 51:
            { return REMAINDER_ASSIGN;
            }
          // fall through
          case 198: break;
          case 52:
            { return COND_AND;
            }
          // fall through
          case 199: break;
          case 53:
            { return BIT_AND_ASSIGN;
            }
          // fall through
          case 200: break;
          case 54:
            { return BIT_CLEAR;
            }
          // fall through
          case 201: break;
          case 55:
            { return MUL_ASSIGN;
            }
          // fall through
          case 202: break;
          case 56:
            { pushState(MAYBE_SEMICOLON); return PLUS_PLUS;
            }
          // fall through
          case 203: break;
          case 57:
            { return PLUS_ASSIGN;
            }
          // fall through
          case 204: break;
          case 58:
            { pushState(MAYBE_SEMICOLON); return MINUS_MINUS;
            }
          // fall through
          case 205: break;
          case 59:
            { return MINUS_ASSIGN;
            }
          // fall through
          case 206: break;
          case 60:
            { return RANGE;
            }
          // fall through
          case 207: break;
          case 61:
            { pushState(MAYBE_SEMICOLON); return FLOAT;
            }
          // fall through
          case 208: break;
          case 62:
            { pushState(MULTI_LINE_COMMENT_STATE);
    commentDepth = 0;
    commentStart = getTokenStart();
            }
          // fall through
          case 209: break;
          case 63:
            { return DOC_COMMENT;
            }
          // fall through
          case 210: break;
          case 64:
            { return QUOTIENT_ASSIGN;
            }
          // fall through
          case 211: break;
          case 65:
            { return VAR_ASSIGN;
            }
          // fall through
          case 212: break;
          case 66:
            { return SEND_CHANNEL;
            }
          // fall through
          case 213: break;
          case 67:
            { return SHIFT_LEFT;
            }
          // fall through
          case 214: break;
          case 68:
            { return LESS_OR_EQUAL;
            }
          // fall through
          case 215: break;
          case 69:
            { return EQ;
            }
          // fall through
          case 216: break;
          case 70:
            { return GREATER_OR_EQUAL;
            }
          // fall through
          case 217: break;
          case 71:
            { return AT_LBRACK;
            }
          // fall through
          case 218: break;
          case 72:
            { return BIT_XOR_ASSIGN;
            }
          // fall through
          case 219: break;
          case 73:
            { pushState(MAYBE_SEMICOLON); return CHAR;
            }
          // fall through
          case 220: break;
          case 74:
            { return AS ;
            }
          // fall through
          case 221: break;
          case 75:
            { return FN;
            }
          // fall through
          case 222: break;
          case 76:
            { return GO;
            }
          // fall through
          case 223: break;
          case 77:
            { return IF;
            }
          // fall through
          case 224: break;
          case 78:
            { return IN;
            }
          // fall through
          case 225: break;
          case 79:
            { return IS;
            }
          // fall through
          case 226: break;
          case 80:
            { return OR;
            }
          // fall through
          case 227: break;
          case 81:
            { return BIT_OR_ASSIGN;
            }
          // fall through
          case 228: break;
          case 82:
            { return COND_OR;
            }
          // fall through
          case 229: break;
          case 83:
            { return LINE_COMMENT;
            }
          // fall through
          case 230: break;
          case 84:
            { pushState(SHORT_TEMPLATE_ENTRY);
                                                   yypushback(yylength() - 1);
                                                   return SHORT_TEMPLATE_ENTRY_START;
            }
          // fall through
          case 231: break;
          case 85:
            { pushState(LONG_TEMPLATE_ENTRY); return LONG_TEMPLATE_ENTRY_START;
            }
          // fall through
          case 232: break;
          case 86:
            { return LITERAL_STRING_TEMPLATE_ESCAPE_ENTRY;
            }
          // fall through
          case 233: break;
          case 87:
            { if (commentDepth > 0) {
            commentDepth--;
        } else {
             int state = yystate();
             popState();
             zzStartRead = commentStart;
             return MULTI_LINE_COMMENT;
        }
            }
          // fall through
          case 234: break;
          case 88:
            { commentDepth++;
            }
          // fall through
          case 235: break;
          case 89:
            { return NOT_IN;
            }
          // fall through
          case 236: break;
          case 90:
            { return NOT_IS;
            }
          // fall through
          case 237: break;
          case 91:
            { return SHEBANG;
            }
          // fall through
          case 238: break;
          case 92:
            { return IF_COMPILE_TIME;
            }
          // fall through
          case 239: break;
          case 93:
            { return BIT_CLEAR_ASSIGN;
            }
          // fall through
          case 240: break;
          case 94:
            { return TRIPLE_DOT;
            }
          // fall through
          case 241: break;
          case 95:
            { pushState(MAYBE_SEMICOLON); return HEX;
            }
          // fall through
          case 242: break;
          case 96:
            { pushState(MAYBE_SEMICOLON); return BIN;
            }
          // fall through
          case 243: break;
          case 97:
            { pushState(MAYBE_SEMICOLON); return OCT;
            }
          // fall through
          case 244: break;
          case 98:
            { return SHIFT_LEFT_ASSIGN;
            }
          // fall through
          case 245: break;
          case 99:
            { return SHIFT_RIGHT_ASSIGN;
            }
          // fall through
          case 246: break;
          case 100:
            { pushState(MAYBE_SEMICOLON); return BAD_CHARACTER;
            }
          // fall through
          case 247: break;
          case 101:
            { pushState(ASM_BLOCK); return ASM;
            }
          // fall through
          case 248: break;
          case 102:
            { return FOR;
            }
          // fall through
          case 249: break;
          case 103:
            { return MUT;
            }
          // fall through
          case 250: break;
          case 104:
            { pushState(MAYBE_SEMICOLON); return NIL;
            }
          // fall through
          case 251: break;
          case 105:
            { return PUB;
            }
          // fall through
          case 252: break;
          case 106:
            { pushState(MAYBE_SEMICOLON); return RAW_STRING;
            }
          // fall through
          case 253: break;
          case 107:
            { yypushback(3); pushState(MAYBE_SEMICOLON); return NOT;
            }
          // fall through
          case 254: break;
          case 108:
            { return FOR_COMPILE_TIME;
            }
          // fall through
          case 255: break;
          case 109:
            { return MULTI_LINE_COMMENT;
            }
          // fall through
          case 256: break;
          case 110:
            { return UNSIGNED_SHIFT_RIGHT_ASSIGN;
            }
          // fall through
          case 257: break;
          case 111:
            { return DUMP;
            }
          // fall through
          case 258: break;
          case 112:
            { return ELSE;
            }
          // fall through
          case 259: break;
          case 113:
            { return ENUM;
            }
          // fall through
          case 260: break;
          case 114:
            { return GOTO;
            }
          // fall through
          case 261: break;
          case 115:
            { return LOCK;
            }
          // fall through
          case 262: break;
          case 116:
            { pushState(MAYBE_SEMICOLON); return NONE;
            }
          // fall through
          case 263: break;
          case 117:
            { pushState(MAYBE_SEMICOLON); return TRUE;
            }
          // fall through
          case 264: break;
          case 118:
            { return TYPE_;
            }
          // fall through
          case 265: break;
          case 119:
            { return COMPILE_DIRECTIVE;
            }
          // fall through
          case 266: break;
          case 120:
            { return ELSE_COMPILE_TIME;
            }
          // fall through
          case 267: break;
          case 121:
            { pushState(MAYBE_SEMICOLON); return BREAK;
            }
          // fall through
          case 268: break;
          case 122:
            { return CONST;
            }
          // fall through
          case 269: break;
          case 123:
            { return DEFER;
            }
          // fall through
          case 270: break;
          case 124:
            { pushState(MAYBE_SEMICOLON); return FALSE;
            }
          // fall through
          case 271: break;
          case 125:
            { return MATCH;
            }
          // fall through
          case 272: break;
          case 126:
            { return RLOCK;
            }
          // fall through
          case 273: break;
          case 127:
            { return SPAWN;
            }
          // fall through
          case 274: break;
          case 128:
            { return UNION;
            }
          // fall through
          case 275: break;
          case 129:
            { return ASSERT;
            }
          // fall through
          case 276: break;
          case 130:
            { return ATOMIC;
            }
          // fall through
          case 277: break;
          case 131:
            { return IMPORT ;
            }
          // fall through
          case 278: break;
          case 132:
            { return MODULE;
            }
          // fall through
          case 279: break;
          case 133:
            { pushState(MAYBE_SEMICOLON); return RETURN;
            }
          // fall through
          case 280: break;
          case 134:
            { return SELECT;
            }
          // fall through
          case 281: break;
          case 135:
            { return SHARED;
            }
          // fall through
          case 282: break;
          case 136:
            { return SIZEOF;
            }
          // fall through
          case 283: break;
          case 137:
            { return STATIC;
            }
          // fall through
          case 284: break;
          case 138:
            { return STRUCT;
            }
          // fall through
          case 285: break;
          case 139:
            { return TYPEOF;
            }
          // fall through
          case 286: break;
          case 140:
            { return UNSAFE;
            }
          // fall through
          case 287: break;
          case 141:
            { return BUILTIN_GLOBAL;
            }
          // fall through
          case 288: break;
          case 142:
            { pushState(MAYBE_SEMICOLON); return CONTINUE;
            }
          // fall through
          case 289: break;
          case 143:
            { return VOLATILE;
            }
          // fall through
          case 290: break;
          case 144:
            { return INTERFACE;
            }
          // fall through
          case 291: break;
          case 145:
            { return ISREFTYPE;
            }
          // fall through
          case 292: break;
          case 146:
            { return OFFSETOF;
            }
          // fall through
          case 293: break;
          case 147:
            { return IMPLEMENTS;
            }
          // fall through
          case 294: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
